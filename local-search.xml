<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>vue源码学习笔记(1)-vue的monorepo模式</title>
    <link href="/2022/10/14/11/"/>
    <url>/2022/10/14/11/</url>
    
    <content type="html"><![CDATA[<h1 id="vue3的代码组织"><a href="#vue3的代码组织" class="headerlink" title="vue3的代码组织"></a>vue3的代码组织</h1><p>Vue 3.x的源码是通过monorepo的方式维护的，这里我们自己编码搭建一个monorepo工程来更好的理解vue代码库的组织实现。</p><blockquote><p>vue的package.json中的配置，照着来</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;packageManager&quot;</span>: <span class="hljs-string">&quot;pnpm@7.1.0&quot;</span>,<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>什么是<a href="https://monorepo.tools/">monorepo</a>?</p></blockquote><h1 id="搭建monorepo工程"><a href="#搭建monorepo工程" class="headerlink" title="搭建monorepo工程"></a>搭建monorepo工程</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir mono-by-repo<br>cd mono-by-repo<br></code></pre></td></tr></table></figure><h2 id="全局安装pnpm"><a href="#全局安装pnpm" class="headerlink" title="全局安装pnpm"></a>全局安装pnpm</h2><p>npm install -g <a href="mailto:&#112;&#110;&#112;&#109;&#x40;&#55;&#x2e;&#49;&#x2e;&#48;">&#112;&#110;&#112;&#109;&#x40;&#55;&#x2e;&#49;&#x2e;&#48;</a></p><blockquote><p><a href="https://pnpm.io/zh/installation">pnpm官网安装文档</a></p></blockquote><p>基本用法和npm一致</p><h2 id="初始化package-json"><a href="#初始化package-json" class="headerlink" title="初始化package.json"></a>初始化package.json</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pnpm init<br></code></pre></td></tr></table></figure><p>添加下node版本配置</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-string">&quot;engines&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;node&quot;</span>: <span class="hljs-string">&quot;&gt;=16.11.0&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>根目录下创建pnpm-workspace.yaml</p><blockquote><p>该文件用来定义工作空间，<a href="https://pnpm.io/zh/pnpm-workspace_yaml">文档</a></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim pnpm-workspace.yaml<br></code></pre></td></tr></table></figure><blockquote><p>编辑内容</p></blockquote><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">packages:</span> <br>    - <span class="hljs-string">&quot;packages/**&quot;</span><br></code></pre></td></tr></table></figure><h2 id="创建对应的目录结构"><a href="#创建对应的目录结构" class="headerlink" title="创建对应的目录结构"></a>创建对应的目录结构</h2><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mel">├── packages<br>│   ├── core<br>│   ├── dom<br>│   ├── util<br>└── pnpm-<span class="hljs-keyword">workspace</span>.yaml<br></code></pre></td></tr></table></figure><p>分别进入对应的模块下执行pnpm init</p><blockquote><p>init完成之后在各自模块的package中修改name配置，对应改成@mono-by-pnpm/core,@mono-by-pnpm/dom,@mono-by-pnpm/util</p></blockquote><p>编写对应的index.js</p><blockquote><p>这里设定一个模块依赖关系:core -&gt; dom -&gt; util</p></blockquote><p>core/index.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> dom = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@mono-by-pnpm/dom&quot;</span>)<br><br>dom()<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;core&quot;</span>)<br></code></pre></td></tr></table></figure><p>dom/index.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> util = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@mono-by-pnpm/util&quot;</span>)<br><span class="hljs-built_in">module</span>.exports = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">dom</span>(<span class="hljs-params"></span>) </span>&#123;<br>  util()<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;dom&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>util/index.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">module</span>.exports = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">util</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;util&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>添加对应的依赖关系<br>core/package.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;dependencies&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;@mono-by-pnpm/dom&quot;</span>: <span class="hljs-string">&quot;1.0.0&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>dom/package.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;dependencies&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;@mono-by-pnpm/util&quot;</span>: <span class="hljs-string">&quot;1.0.0&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><p><a href="https://pnpm.io/zh/cli/recursive">pnpm -r</a>支持在工作区的每个项目中运行命令，可和install命令一起使用</p><p>回到根目录执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pnpm install -r<br></code></pre></td></tr></table></figure><p>进入packages/core目录下执行命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">node index.js<br></code></pre></td></tr></table></figure><p>看到如下输出</p><blockquote><p>util<br>dom<br>core</p></blockquote><p>搭建成功～</p><blockquote><p>练习代码库的<a href="https://github.com/moring-abyss/vue-study-notes/tree/1.0.0">地址</a></p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>vue源码学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>编译原理学习笔记</title>
    <link href="/2022/09/10/8/"/>
    <url>/2022/09/10/8/</url>
    
    <content type="html"><![CDATA[<blockquote><p>简单的加减乘除计算器</p></blockquote><p><a href="https://moring-abyss.github.io/example/3.html" target="_blank">完整演示地址</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;int&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>calc<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">/**</span></span><br><span class="hljs-comment"><span class="javascript">       * 词法分析类</span></span><br><span class="hljs-comment"><span class="javascript">       */</span></span><br><span class="javascript">      <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SimpleLexer</span> </span>&#123;</span><br><span class="javascript">        <span class="hljs-comment">// 所有枚举状态</span></span><br><span class="javascript">        <span class="hljs-keyword">static</span> enum = &#123;</span><br><span class="javascript">          <span class="hljs-attr">INITIAL</span>: <span class="hljs-string">&quot;init&quot;</span>,</span><br><span class="javascript">          <span class="hljs-attr">PLUS</span>: <span class="hljs-string">&quot;plus&quot;</span>, <span class="hljs-comment">// +</span></span><br><span class="javascript">          <span class="hljs-attr">MINUS</span>: <span class="hljs-string">&quot;minus&quot;</span>, <span class="hljs-comment">// -</span></span><br><span class="javascript">          <span class="hljs-attr">STAR</span>: <span class="hljs-string">&quot;star&quot;</span>, <span class="hljs-comment">// *</span></span><br><span class="javascript">          <span class="hljs-attr">DIVIDE</span>: <span class="hljs-string">&quot;divide&quot;</span>, <span class="hljs-comment">// /</span></span><br><span class="javascript">          <span class="hljs-attr">NUMBER</span>: <span class="hljs-string">&quot;number&quot;</span>,</span><br><span class="javascript">        &#125;;</span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">read</span>(<span class="hljs-params">code</span>)</span> &#123;</span><br><span class="javascript">          <span class="hljs-built_in">this</span>.state = SimpleLexer.enum.INITIAL;</span><br><span class="javascript">          <span class="hljs-built_in">this</span>.tokenText = <span class="hljs-string">&quot;&quot;</span>;</span><br><span class="javascript">          <span class="hljs-built_in">this</span>.tokenList = [];</span><br><span class="javascript">          <span class="hljs-keyword">let</span> ch;</span><br><span class="javascript">          <span class="hljs-built_in">Array</span>.prototype.forEach.call(code, <span class="hljs-function">(<span class="hljs-params">char</span>) =&gt;</span> &#123;</span><br><span class="javascript">            ch = char;</span><br><span class="javascript">            <span class="hljs-built_in">this</span>.tokenize(char);</span><br><span class="javascript">          &#125;);</span><br><span class="javascript">          <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.tokenText.length &gt; <span class="hljs-number">0</span>) &#123;</span><br><span class="javascript">            <span class="hljs-built_in">this</span>.initToken(ch);</span><br><span class="javascript">          &#125;</span><br><span class="javascript">        &#125;</span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">tokenize</span>(<span class="hljs-params">char</span>)</span> &#123;</span><br><span class="javascript">          <span class="hljs-comment">// 词法分析</span></span><br><span class="javascript">          <span class="hljs-keyword">switch</span> (<span class="hljs-built_in">this</span>.state) &#123;</span><br><span class="javascript">            <span class="hljs-keyword">case</span> SimpleLexer.enum.INITIAL:</span><br><span class="javascript">              <span class="hljs-comment">// 重新确定后续状态</span></span><br><span class="javascript">              <span class="hljs-built_in">this</span>.state = <span class="hljs-built_in">this</span>.initToken(char, <span class="hljs-literal">true</span>);</span><br><span class="javascript">              <span class="hljs-keyword">break</span>;</span><br><span class="javascript">            <span class="hljs-keyword">case</span> SimpleLexer.enum.PLUS:</span><br><span class="javascript">            <span class="hljs-keyword">case</span> SimpleLexer.enum.MINUS:</span><br><span class="javascript">            <span class="hljs-keyword">case</span> SimpleLexer.enum.STAR:</span><br><span class="javascript">            <span class="hljs-keyword">case</span> SimpleLexer.enum.DIVIDE:</span><br><span class="javascript">              <span class="hljs-comment">// 退出当前状态</span></span><br><span class="javascript">              <span class="hljs-built_in">this</span>.state = <span class="hljs-built_in">this</span>.initToken(char);</span><br><span class="javascript">              <span class="hljs-keyword">break</span>;</span><br><span class="javascript">            <span class="hljs-keyword">case</span> SimpleLexer.enum.NUMBER:</span><br><span class="javascript">              <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.getTokenType(char) === SimpleLexer.enum.NUMBER) &#123;</span><br><span class="javascript">                <span class="hljs-comment">// 保持当前状态</span></span><br><span class="javascript">                <span class="hljs-built_in">this</span>.tokenText += char;</span><br><span class="javascript">              &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript">                <span class="hljs-comment">// 退出当前状态</span></span><br><span class="javascript">                <span class="hljs-built_in">this</span>.state = <span class="hljs-built_in">this</span>.initToken(char);</span><br><span class="javascript">              &#125;</span><br><span class="javascript">              <span class="hljs-keyword">break</span>;</span><br><span class="javascript">          &#125;</span><br><span class="javascript">        &#125;</span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">initToken</span>(<span class="hljs-params">char</span>)</span> &#123;</span><br><span class="javascript">          <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.tokenText.length &gt; <span class="hljs-number">0</span>) &#123;</span><br><span class="javascript">            <span class="hljs-built_in">this</span>.tokenList.push(&#123;</span><br><span class="javascript">              <span class="hljs-attr">text</span>: <span class="hljs-built_in">this</span>.tokenText,</span><br><span class="javascript">              <span class="hljs-attr">type</span>: <span class="hljs-built_in">this</span>.getTokenType(<span class="hljs-built_in">this</span>.tokenText),</span><br><span class="javascript">            &#125;);</span><br><span class="javascript">            <span class="hljs-built_in">this</span>.tokenText = <span class="hljs-string">&quot;&quot;</span>;</span><br><span class="javascript">          &#125;</span><br><span class="javascript">          <span class="hljs-built_in">this</span>.tokenText = char;</span><br><span class="javascript">          <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.getTokenType(char);</span><br><span class="javascript">        &#125;</span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">getTokenType</span>(<span class="hljs-params">char, init</span>)</span> &#123;</span><br><span class="javascript">          <span class="hljs-comment">// 获取token类型</span></span><br><span class="javascript">          <span class="hljs-keyword">switch</span> (char) &#123;</span><br><span class="javascript">            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;+&quot;</span>:</span><br><span class="javascript">              <span class="hljs-keyword">return</span> SimpleLexer.enum.PLUS;</span><br><span class="javascript">            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;-&quot;</span>:</span><br><span class="javascript">              <span class="hljs-keyword">return</span> SimpleLexer.enum.MINUS;</span><br><span class="javascript">            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;*&quot;</span>:</span><br><span class="javascript">              <span class="hljs-keyword">return</span> SimpleLexer.enum.STAR;</span><br><span class="javascript">            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;/&quot;</span>:</span><br><span class="javascript">              <span class="hljs-keyword">return</span> SimpleLexer.enum.DIVIDE;</span><br><span class="javascript">            <span class="hljs-keyword">default</span>:</span><br><span class="javascript">              <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">isNaN</span>(char)) &#123;</span><br><span class="javascript">                <span class="hljs-keyword">return</span> SimpleLexer.enum.NUMBER;</span><br><span class="javascript">              &#125;</span><br><span class="javascript">              <span class="hljs-keyword">if</span> (init) &#123;</span><br><span class="javascript">                <span class="hljs-keyword">return</span> SimpleLexer.enum.INITIAL;</span><br><span class="javascript">              &#125;</span><br><span class="javascript">              <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&quot;程序编译异常&quot;</span>);</span><br><span class="javascript">          &#125;</span><br><span class="javascript">        &#125;</span><br><span class="javascript">      &#125;</span><br><span class="javascript">      <span class="hljs-comment">/**</span></span><br><span class="hljs-comment"><span class="javascript">       * AST节点</span></span><br><span class="hljs-comment"><span class="javascript">       * <span class="hljs-doctag">@params </span>type 类型</span></span><br><span class="hljs-comment"><span class="javascript">       * <span class="hljs-doctag">@params </span>text 文本</span></span><br><span class="hljs-comment"><span class="javascript">       * <span class="hljs-doctag">@params </span>parent 父节点</span></span><br><span class="hljs-comment"><span class="javascript">       * <span class="hljs-doctag">@params </span>children 子节点</span></span><br><span class="hljs-comment"><span class="javascript">       */</span></span><br><span class="javascript">      <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ASTNode</span> </span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">static</span> enum = &#123;</span><br><span class="javascript">          <span class="hljs-attr">Programm</span>: <span class="hljs-string">&quot;Programm&quot;</span>, <span class="hljs-comment">//程序入口，根节点</span></span><br><span class="javascript">          <span class="hljs-attr">IntDeclaration</span>: <span class="hljs-string">&quot;IntDeclaration&quot;</span>, <span class="hljs-comment">//整型变量声明</span></span><br><span class="javascript">          <span class="hljs-attr">ExpressionStmt</span>: <span class="hljs-string">&quot;ExpressionStmt&quot;</span>, <span class="hljs-comment">//表达式语句，即表达式后面跟个分号</span></span><br><span class="javascript">          <span class="hljs-attr">AssignmentStmt</span>: <span class="hljs-string">&quot;AssignmentStmt&quot;</span>, <span class="hljs-comment">//赋值语句</span></span><br><span class="javascript"></span><br><span class="javascript">          <span class="hljs-attr">Primary</span>: <span class="hljs-string">&quot;Primary&quot;</span>, <span class="hljs-comment">//基础表达式</span></span><br><span class="javascript">          <span class="hljs-attr">Multiplicative</span>: <span class="hljs-string">&quot;Multiplicative&quot;</span>, <span class="hljs-comment">//乘法表达式</span></span><br><span class="javascript">          <span class="hljs-attr">Additive</span>: <span class="hljs-string">&quot;Additive&quot;</span>, <span class="hljs-comment">//加法表达式</span></span><br><span class="javascript"></span><br><span class="javascript">          <span class="hljs-attr">Identifier</span>: <span class="hljs-string">&quot;Identifier&quot;</span>, <span class="hljs-comment">//标识符</span></span><br><span class="javascript">          <span class="hljs-attr">IntLiteral</span>: <span class="hljs-string">&quot;IntLiteral&quot;</span>, <span class="hljs-comment">//整型字面量</span></span><br><span class="javascript">        &#125;;</span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">type, text</span>)</span> &#123;</span><br><span class="javascript">          <span class="hljs-built_in">this</span>.type = type;</span><br><span class="javascript">          <span class="hljs-built_in">this</span>.text = text;</span><br><span class="javascript">          <span class="hljs-built_in">this</span>.parent = <span class="hljs-literal">null</span>;</span><br><span class="javascript">          <span class="hljs-built_in">this</span>.children = [];</span><br><span class="javascript">        &#125;</span><br><span class="javascript"></span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">addChild</span>(<span class="hljs-params">child</span>)</span> &#123;</span><br><span class="javascript">          <span class="hljs-built_in">this</span>.children.push(child);</span><br><span class="javascript">          child.parent = <span class="hljs-built_in">this</span>;</span><br><span class="javascript">        &#125;</span><br><span class="javascript">      &#125;</span><br><span class="javascript">      <span class="hljs-comment">/**</span></span><br><span class="hljs-comment"><span class="javascript">       * 语法分析</span></span><br><span class="hljs-comment"><span class="javascript">       */</span></span><br><span class="javascript">      <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SimpleCalculator</span> </span>&#123;</span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">parse</span>(<span class="hljs-params">tokens</span>)</span> &#123;</span><br><span class="javascript">          <span class="hljs-comment">// 创建ast根节点</span></span><br><span class="javascript">          <span class="hljs-keyword">let</span> astRootNode = <span class="hljs-keyword">new</span> ASTNode(ASTNode.enum.Programm, <span class="hljs-string">&quot;Calculator&quot;</span>);</span><br><span class="javascript">          <span class="hljs-keyword">let</span> child = <span class="hljs-built_in">this</span>.additive(tokens);</span><br><span class="javascript">          <span class="hljs-keyword">if</span> (child != <span class="hljs-literal">null</span>) &#123;</span><br><span class="javascript">            astRootNode.addChild(child);</span><br><span class="javascript">          &#125;</span><br><span class="javascript">          <span class="hljs-keyword">return</span> astRootNode;</span><br><span class="javascript">        &#125;</span><br><span class="javascript">        <span class="hljs-comment">/**</span></span><br><span class="hljs-comment"><span class="javascript">         * 语法解析-加法表达式</span></span><br><span class="hljs-comment"><span class="javascript">         */</span></span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">additive</span>(<span class="hljs-params">tokens</span>)</span> &#123;</span><br><span class="javascript">          <span class="hljs-keyword">let</span> child1 = <span class="hljs-built_in">this</span>.multiplicative(tokens);</span><br><span class="javascript">          <span class="hljs-keyword">let</span> node = child1;</span><br><span class="javascript">          <span class="hljs-keyword">let</span> token = tokens[<span class="hljs-number">0</span>];</span><br><span class="javascript">          <span class="hljs-keyword">if</span> (child1 &amp;&amp; token) &#123;</span><br><span class="javascript">            <span class="hljs-keyword">if</span> (</span><br><span class="javascript">              token.type === SimpleLexer.enum.PLUS ||</span><br><span class="javascript">              token.type === SimpleLexer.enum.MINUS</span><br><span class="javascript">            ) &#123;</span><br><span class="javascript">              token = tokens.shift();</span><br><span class="javascript">              <span class="hljs-keyword">let</span> child2 = <span class="hljs-built_in">this</span>.additive(tokens);</span><br><span class="javascript">              <span class="hljs-keyword">if</span> (child2) &#123;</span><br><span class="javascript">                node = <span class="hljs-keyword">new</span> ASTNode(ASTNode.enum.Additive, token.text);</span><br><span class="javascript">                node.addChild(child1);</span><br><span class="javascript">                node.addChild(child2);</span><br><span class="javascript">              &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript">                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(</span><br><span class="javascript">                  <span class="hljs-string">&quot;invalid additive expression, expecting the right part.&quot;</span></span><br><span class="javascript">                );</span><br><span class="javascript">              &#125;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">          &#125;</span><br><span class="javascript">          <span class="hljs-keyword">return</span> node;</span><br><span class="javascript">        &#125;</span><br><span class="javascript">        <span class="hljs-comment">/**</span></span><br><span class="hljs-comment"><span class="javascript">         * 语法解析-乘法表达式</span></span><br><span class="hljs-comment"><span class="javascript">         */</span></span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">multiplicative</span>(<span class="hljs-params">tokens</span>)</span> &#123;</span><br><span class="javascript">          <span class="hljs-keyword">let</span> child1 = <span class="hljs-built_in">this</span>.primary(tokens);</span><br><span class="javascript">          <span class="hljs-keyword">let</span> node = child1;</span><br><span class="javascript">          <span class="hljs-keyword">let</span> token = tokens[<span class="hljs-number">0</span>];</span><br><span class="javascript">          <span class="hljs-keyword">if</span> (child1 &amp;&amp; token) &#123;</span><br><span class="javascript">            <span class="hljs-comment">// 匹配完一个基础表达式后如果token还有值则继续匹配,否则直接返回基础表达式(在这个简单的计算器中也就是表示数值的ast节点)</span></span><br><span class="javascript">            <span class="hljs-keyword">if</span> (</span><br><span class="javascript">              token.type === SimpleLexer.enum.STAR ||</span><br><span class="javascript">              token.type === SimpleLexer.enum.DIVIDE</span><br><span class="javascript">            ) &#123;</span><br><span class="javascript">              token = tokens.shift();</span><br><span class="javascript">              <span class="hljs-keyword">let</span> child2 = <span class="hljs-built_in">this</span>.multiplicative(tokens);</span><br><span class="javascript">              <span class="hljs-keyword">if</span> (child2) &#123;</span><br><span class="javascript">                <span class="hljs-comment">// 顺利匹配成功，返回乘法表达式的ast节点</span></span><br><span class="javascript">                node = <span class="hljs-keyword">new</span> ASTNode(ASTNode.enum.Multiplicative, token.text);</span><br><span class="javascript">                node.addChild(child1);</span><br><span class="javascript">                node.addChild(child2);</span><br><span class="javascript">              &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript">                <span class="hljs-comment">// 没有匹配到对应运算符，这里就是解析异常了，简单理解为 1 *，缺失表达式右边的部分</span></span><br><span class="javascript">                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(</span><br><span class="javascript">                  <span class="hljs-string">&quot;invalid multiplicative expression, expecting the right part.&quot;</span></span><br><span class="javascript">                );</span><br><span class="javascript">              &#125;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">          &#125;</span><br><span class="javascript">          <span class="hljs-keyword">return</span> node;</span><br><span class="javascript">        &#125;</span><br><span class="javascript">        <span class="hljs-comment">/**</span></span><br><span class="hljs-comment"><span class="javascript">         * 语法解析-基础表达式</span></span><br><span class="hljs-comment"><span class="javascript">         * 这里只做数值判断，类似括号，标识符等不考虑</span></span><br><span class="hljs-comment"><span class="javascript">         */</span></span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">primary</span>(<span class="hljs-params">tokens</span>)</span> &#123;</span><br><span class="javascript">          <span class="hljs-keyword">let</span> node = <span class="hljs-literal">null</span>;</span><br><span class="javascript">          <span class="hljs-comment">// 预读token</span></span><br><span class="javascript">          <span class="hljs-keyword">let</span> token = tokens[<span class="hljs-number">0</span>];</span><br><span class="javascript">          <span class="hljs-keyword">if</span> (token) &#123;</span><br><span class="javascript">            <span class="hljs-keyword">if</span> (token.type === SimpleLexer.enum.NUMBER) &#123;</span><br><span class="javascript">              <span class="hljs-comment">// 如果是数值</span></span><br><span class="javascript">              token = tokens.shift();</span><br><span class="javascript">              node = <span class="hljs-keyword">new</span> ASTNode(ASTNode.enum.IntLiteral, token.text);</span><br><span class="javascript">            &#125;</span><br><span class="javascript">          &#125;</span><br><span class="javascript">          <span class="hljs-keyword">return</span> node;</span><br><span class="javascript">        &#125;</span><br><span class="javascript">      &#125;</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">/**</span></span><br><span class="hljs-comment"><span class="javascript">       * 求值</span></span><br><span class="hljs-comment"><span class="javascript">       */</span></span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">evaluate</span>(<span class="hljs-params">node</span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">let</span> result = <span class="hljs-number">0</span>;</span><br><span class="javascript">        <span class="hljs-keyword">let</span> child1;</span><br><span class="javascript">        <span class="hljs-keyword">let</span> child2;</span><br><span class="javascript">        <span class="hljs-keyword">let</span> value1;</span><br><span class="javascript">        <span class="hljs-keyword">let</span> value2;</span><br><span class="javascript">        <span class="hljs-keyword">switch</span> (node.type) &#123;</span><br><span class="javascript">          <span class="hljs-keyword">case</span> ASTNode.enum.Programm:</span><br><span class="javascript">            node.children.forEach(<span class="hljs-function">(<span class="hljs-params">child</span>) =&gt;</span> &#123;</span><br><span class="javascript">              result = evaluate(child);</span><br><span class="javascript">            &#125;);</span><br><span class="javascript">            <span class="hljs-keyword">break</span>;</span><br><span class="javascript">          <span class="hljs-keyword">case</span> ASTNode.enum.Additive:</span><br><span class="javascript">            child1 = node.children[<span class="hljs-number">0</span>];</span><br><span class="javascript">            value1 = evaluate(child1);</span><br><span class="javascript">            child2 = node.children[<span class="hljs-number">1</span>];</span><br><span class="javascript">            value2 = evaluate(child2);</span><br><span class="javascript">            <span class="hljs-keyword">if</span> (node.text === <span class="hljs-string">&quot;+&quot;</span>) &#123;</span><br><span class="javascript">              result = value1 + value2;</span><br><span class="javascript">            &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript">              result = value1 - value2;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">            <span class="hljs-keyword">break</span>;</span><br><span class="javascript">          <span class="hljs-keyword">case</span> ASTNode.enum.Multiplicative:</span><br><span class="javascript">            child1 = node.children[<span class="hljs-number">0</span>];</span><br><span class="javascript">            value1 = evaluate(child1);</span><br><span class="javascript">            child2 = node.children[<span class="hljs-number">1</span>];</span><br><span class="javascript">            value2 = evaluate(child2);</span><br><span class="javascript">            <span class="hljs-keyword">if</span> (node.text === <span class="hljs-string">&quot;*&quot;</span>) &#123;</span><br><span class="javascript">              result = value1 * value2;</span><br><span class="javascript">            &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript">              result = value1 / value2;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">            <span class="hljs-keyword">break</span>;</span><br><span class="javascript">          <span class="hljs-keyword">case</span> ASTNode.enum.IntLiteral:</span><br><span class="javascript">            result = <span class="hljs-built_in">parseInt</span>(node.text);</span><br><span class="javascript">          <span class="hljs-keyword">default</span>:</span><br><span class="javascript">        &#125;</span><br><span class="javascript">        <span class="hljs-comment">// 展示计算过程</span></span><br><span class="javascript">        <span class="hljs-keyword">if</span>(value1 &amp;&amp; value2) &#123;</span><br><span class="javascript">          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`<span class="hljs-subst">$&#123;value1&#125;</span><span class="hljs-subst">$&#123;node.text&#125;</span><span class="hljs-subst">$&#123;value2&#125;</span>=<span class="hljs-subst">$&#123;result&#125;</span>`</span>)</span><br><span class="javascript">        &#125;</span><br><span class="javascript">        <span class="hljs-keyword">return</span> result;</span><br><span class="javascript">      &#125;</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> intEle = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;int&quot;</span>);</span><br><span class="javascript">      <span class="hljs-keyword">const</span> btnEle = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;btn&quot;</span>);</span><br><span class="javascript">      <span class="hljs-keyword">const</span> simpleLexer = <span class="hljs-keyword">new</span> SimpleLexer();</span><br><span class="javascript">      <span class="hljs-keyword">const</span> simpleCalculator = <span class="hljs-keyword">new</span> SimpleCalculator();</span><br><span class="javascript">      btnEle.addEventListener(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">const</span> code = intEle.value;</span><br><span class="javascript">        <span class="hljs-comment">// 词法分析</span></span><br><span class="javascript">        simpleLexer.read(code);</span><br><span class="javascript">        <span class="hljs-comment">// 语法分析</span></span><br><span class="javascript">        <span class="hljs-keyword">let</span> astNode = simpleCalculator.parse(simpleLexer.tokenList);</span><br><span class="javascript">        <span class="hljs-comment">// 计算</span></span><br><span class="javascript">        <span class="hljs-keyword">const</span> result = evaluate(astNode);</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(result);</span><br><span class="javascript">      &#125;);</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h3 id="左递归"><a href="#左递归" class="headerlink" title="左递归"></a>左递归</h3><p>当一个文法规则推导出来的句型中包含以自身为最左符号的句型时，称之为左递归。</p><blockquote><p>add ::= add + mul | mul<br>由于产生式的第一个元素为自身，程序会无限的递归下去。</p></blockquote><p>通过伪代码举例，该程序会无限递归</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">assert</span>(<span class="hljs-params">bool</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> assert(bool) &amp;&amp; bool<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="结合性"><a href="#结合性" class="headerlink" title="结合性"></a>结合性</h3><p>同样优先级的运算符是从左到右计算还是从右到左计算叫做结合性</p><p>当前additive函数的算法使用了右递归的写法</p><blockquote><p>add ::= mul | mul + add<br>从计算过程的打印中可以看出右递归导致了右结合</p></blockquote><h3 id="如何解决左递归"><a href="#如何解决左递归" class="headerlink" title="如何解决左递归"></a>如何解决左递归</h3><p>add有两个产生式</p><ol><li>add ::= add + mul</li><li>add ::= mul<br>如果只用1来推导add，推导过程无法终结，形成add + mul + mul… + mul这样的序列<br>要终结推导过程就必然要使用到产生式2，且在最后一步使用，因此产生式可以改为<blockquote><p>add ::= mul add’<br>add’产生式必须满足 + mul + mul.. + mul的序列<br>add’ ::= + mul add’<br>又因为序列的长度有限，所以需要一个产生式ε(表示空集)来终结这个推导过程<br>add’ ::= + mul add’ | ε<br>add’的模式用EBNF写法改写<br>add’ ::= (‘+’ mul)*<br>最终的add推导出的产生式<br>add ::= mul (‘+’ mul)*</p></blockquote></li></ol><p>改写上述的加法表达式解析的算法后的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-title">additive</span>(<span class="hljs-params">tokens</span>)</span> &#123;<br>  <span class="hljs-keyword">let</span> child1 = <span class="hljs-built_in">this</span>.multiplicative(tokens);<br>  <span class="hljs-keyword">let</span> node = child1;<br>  <span class="hljs-keyword">if</span>(child1) &#123;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>      <span class="hljs-keyword">let</span> token = tokens[<span class="hljs-number">0</span>]<br>      <span class="hljs-keyword">if</span>(token &amp;&amp; (<br>        token.type === SimpleLexer.enum.PLUS ||<br>        token.type === SimpleLexer.enum.MINUS<br>      )) &#123;<br>        token = tokens.shift()<br>        <span class="hljs-keyword">let</span> child2 = <span class="hljs-built_in">this</span>.multiplicative(tokens)<br>        node = <span class="hljs-keyword">new</span> ASTNode(ASTNode.enum.Additive, token.text);<br>        node.addChild(child1);<br>        node.addChild(child2);<br>        child1 = node<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">break</span>;<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> node;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>编译原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jenkins</title>
    <link href="/2022/02/24/9/"/>
    <url>/2022/02/24/9/</url>
    
    <content type="html"><![CDATA[<h1 id="yum安装jenkins"><a href="#yum安装jenkins" class="headerlink" title="yum安装jenkins"></a>yum安装jenkins</h1><h2 id="添加jenkins-repo"><a href="#添加jenkins-repo" class="headerlink" title="添加jenkins repo"></a>添加jenkins repo</h2><blockquote><p>sudo wget -O /etc/yum.repos.d/jenkins.repo <a href="https://pkg.jenkins.io/redhat-stable/jenkins.repo">https://pkg.jenkins.io/redhat-stable/jenkins.repo</a></p></blockquote><h2 id="导入jenkins公钥"><a href="#导入jenkins公钥" class="headerlink" title="导入jenkins公钥"></a>导入jenkins公钥</h2><blockquote><p>sudo rpm –import <a href="https://pkg.jenkins.io/redhat-stable/jenkins.io.key">https://pkg.jenkins.io/redhat-stable/jenkins.io.key</a></p></blockquote><h2 id="更新yum"><a href="#更新yum" class="headerlink" title="更新yum"></a>更新yum</h2><blockquote><p>sudo yum upgrade</p></blockquote><h2 id="安装jdk"><a href="#安装jdk" class="headerlink" title="安装jdk"></a>安装jdk</h2><blockquote><p>sudo yum install fontconfig java-11-openjdk</p></blockquote><h2 id="安装jenkins"><a href="#安装jenkins" class="headerlink" title="安装jenkins"></a>安装jenkins</h2><blockquote><p>yum install jenkins</p></blockquote><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>sudo systemctl enable jenkins<br>sudo systemctl start jenkins<br>sudo systemctl status jenkins</p><h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><blockquote><p>yum install git</p></blockquote><h2 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h2><blockquote><p>rm -fv /etc/yum.repos.d/nodesource*<br>curl –silent –location <a href="https://rpm.nodesource.com/setup_14.x">https://rpm.nodesource.com/setup_14.x</a> | sudo bash<br>yum install -y nodejs</p></blockquote><h2 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h2><p>这里不是很熟悉，所以选择了推荐的插件安装</p><h3 id="su无法切换jenkins用户"><a href="#su无法切换jenkins用户" class="headerlink" title="su无法切换jenkins用户"></a>su无法切换jenkins用户</h3><blockquote><p>执行 - vi /etc/passwd<br>找到jenkins那行，把/bin/false改成/bin/bash</p></blockquote><h3 id="无法clone代码"><a href="#无法clone代码" class="headerlink" title="无法clone代码"></a>无法clone代码</h3><blockquote><p>jenkins用户加入root组<br>gpasswd -a root jenkins<br>vim /etc/sysconfig/jenkins; 修改配置：JENKINS_USER=”root”    JENKINS_GROUP=”root”<br>修改文件夹权限：chomd 777 &lt;文件夹名称&gt;</p></blockquote><h3 id="给jenkins用户添加sudo权限"><a href="#给jenkins用户添加sudo权限" class="headerlink" title="给jenkins用户添加sudo权限"></a>给jenkins用户添加sudo权限</h3><p>添加到sudo组或者wheel组</p><blockquote><p>usermod -a -G wheel jenkins<br>usermod -a -G sudo jenkins<br>sudo visudo -f /etc/sudoers<br>找到root    ALL=(ALL)       ALL，这行下添加代码<br>jenkins    ALL=(ALL)       NOPASSWD:ALL </p></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>React-setState深入</title>
    <link href="/2022/01/09/3/"/>
    <url>/2022/01/09/3/</url>
    
    <content type="html"><![CDATA[<blockquote><p>React-18.0.0</p></blockquote><p>面试经常问到 setState 是同步还是异步，这里就这个问题研究下源码实现，调试并记录。</p><h2 id="setState-实现"><a href="#setState-实现" class="headerlink" title="setState 实现"></a>setState 实现</h2><h3 id="ReactFiberClassComponent-new"><a href="#ReactFiberClassComponent-new" class="headerlink" title="ReactFiberClassComponent.new"></a>ReactFiberClassComponent.new</h3><p>调用 classComponentUpdater.enqueueSetState，该方法内部实现会在 fiber 节点上挂载一个任务队列：updateQueue，数据结构参考：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> fiber = &#123;<br>  <span class="hljs-attr">updateQueue</span>: &#123;<br>    <span class="hljs-attr">shared</span>: &#123;<br>      <span class="hljs-comment">// ...</span><br>      <span class="hljs-attr">pending</span>: &#123;<br>        <span class="hljs-comment">// ...</span><br>        <span class="hljs-attr">next</span>: &#123;&#125;,<br>      &#125;,<br>    &#125;,<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p>链表结构，多次调用 setState 时如何合并的关键代码如下。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">enqueueUpdate</span>&lt;<span class="hljs-title">State</span>&gt;(<span class="hljs-params"></span></span><br><span class="hljs-params"><span class="hljs-function">  fiber: Fiber,</span></span><br><span class="hljs-params"><span class="hljs-function">  update: Update&lt;State&gt;,</span></span><br><span class="hljs-params"><span class="hljs-function">  lane: Lane</span></span><br><span class="hljs-params"><span class="hljs-function"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> updateQueue = fiber.updateQueue;<br>  <span class="hljs-keyword">if</span> (updateQueue === <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-comment">// Only occurs if the fiber has been unmounted.</span><br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">const</span> sharedQueue: SharedQueue&lt;State&gt; = (updateQueue: any).shared;<br><br>  <span class="hljs-keyword">if</span> (isInterleavedUpdate(fiber, lane)) &#123;<br>    <span class="hljs-keyword">const</span> interleaved = sharedQueue.interleaved;<br>    <span class="hljs-keyword">if</span> (interleaved === <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-comment">// This is the first update. Create a circular list.</span><br>      update.next = update;<br>      <span class="hljs-comment">// At the end of the current render, this queue&#x27;s interleaved updates will</span><br>      <span class="hljs-comment">// be transferred to the pending queue.</span><br>      pushInterleavedQueue(sharedQueue);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      update.next = interleaved.next;<br>      interleaved.next = update;<br>    &#125;<br>    sharedQueue.interleaved = update;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">const</span> pending = sharedQueue.pending;<br>    <span class="hljs-keyword">if</span> (pending === <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-comment">// This is the first update. Create a circular list.</span><br>      update.next = update;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      update.next = pending.next;<br>      pending.next = update;<br>    &#125;<br>    sharedQueue.pending = update;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>到这一步 setState 方法就差不多结束了，并没有真正的修改 state 值也没有渲染页面。<br>所以最初学习 React 时的疑问就解决了一个，为什么调用了 setState 后取 this.state 值仍然不变？</p><p>接下来了解是 React 触发执行任务队列的时机以及同一个 state 值的合并机制</p><h2 id="触发的时机"><a href="#触发的时机" class="headerlink" title="触发的时机"></a>触发的时机</h2><p>ReactDom.render 入口函数中，listenToAllSupportedEvents 给 container 注册了所有支持的事件监听<br>调用链：listenToAllSupportedEvents -&gt; listenToNativeEvent -&gt; addTrappedEventListener -&gt; createEventListenerWrapperWithPriority</p><blockquote><p>createEventListenerWrapperWithPriority 注册的监听事件中最终都指向 dispatchEvent 函数</p></blockquote><p>逐步调试 =&gt; attemptToDispatchEvent -&gt; dispatchEventForPluginEventSystem -&gt; batchedUpdates -&gt; batchedUpdatesImpl -&gt; flushSyncCallbacksOnlyInLegacyMode -&gt; flushSyncCallbacks</p><blockquote><p>batchedUpdates 实现方法在 ReactFiberWorkLoop.new.js 中</p></blockquote><p>回到最初的起点.</p><h2 id="何时合并"><a href="#何时合并" class="headerlink" title="何时合并"></a>何时合并</h2><p>processUpdateQueue 中取出 updateQueue 队列，从链表的尾部往前提取 task 执行合并 state<br>源码部分：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">processUpdateQueue</span>&lt;<span class="hljs-title">State</span>&gt;(<span class="hljs-params"></span></span><br><span class="hljs-params"><span class="hljs-function">  workInProgress: Fiber,</span></span><br><span class="hljs-params"><span class="hljs-function">  props: any,</span></span><br><span class="hljs-params"><span class="hljs-function">  instance: any,</span></span><br><span class="hljs-params"><span class="hljs-function">  renderLanes: Lanes</span></span><br><span class="hljs-params"><span class="hljs-function"></span>): <span class="hljs-title">void</span> </span>&#123;<br>  <span class="hljs-comment">// This is always non-null on a ClassComponent or HostRoot</span><br>  <span class="hljs-keyword">const</span> queue: UpdateQueue&lt;State&gt; = (workInProgress.updateQueue: any);<br><br>  hasForceUpdate = <span class="hljs-literal">false</span>;<br><br>  <span class="hljs-keyword">if</span> (__DEV__) &#123;<br>    currentlyProcessingQueue = queue.shared;<br>  &#125;<br><br>  <span class="hljs-keyword">let</span> firstBaseUpdate = queue.firstBaseUpdate;<br>  <span class="hljs-keyword">let</span> lastBaseUpdate = queue.lastBaseUpdate;<br><br>  <span class="hljs-comment">// Check if there are pending updates. If so, transfer them to the base queue.</span><br>  <span class="hljs-keyword">let</span> pendingQueue = queue.shared.pending;<br>  <span class="hljs-keyword">if</span> (pendingQueue !== <span class="hljs-literal">null</span>) &#123;<br>    queue.shared.pending = <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-comment">// The pending queue is circular. Disconnect the pointer between first</span><br>    <span class="hljs-comment">// and last so that it&#x27;s non-circular.</span><br>    <span class="hljs-keyword">const</span> lastPendingUpdate = pendingQueue;<br>    <span class="hljs-keyword">const</span> firstPendingUpdate = lastPendingUpdate.next;<br>    lastPendingUpdate.next = <span class="hljs-literal">null</span>;<br>    <span class="hljs-comment">// Append pending updates to base queue</span><br>    <span class="hljs-keyword">if</span> (lastBaseUpdate === <span class="hljs-literal">null</span>) &#123;<br>      firstBaseUpdate = firstPendingUpdate;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      lastBaseUpdate.next = firstPendingUpdate;<br>    &#125;<br>    lastBaseUpdate = lastPendingUpdate;<br><br>    <span class="hljs-comment">// If there&#x27;s a current queue, and it&#x27;s different from the base queue, then</span><br>    <span class="hljs-comment">// we need to transfer the updates to that queue, too. Because the base</span><br>    <span class="hljs-comment">// queue is a singly-linked list with no cycles, we can append to both</span><br>    <span class="hljs-comment">// lists and take advantage of structural sharing.</span><br>    <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> Pass `current` as argument</span><br>    <span class="hljs-keyword">const</span> current = workInProgress.alternate;<br>    <span class="hljs-keyword">if</span> (current !== <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-comment">// This is always non-null on a ClassComponent or HostRoot</span><br>      <span class="hljs-keyword">const</span> currentQueue: UpdateQueue&lt;State&gt; = (current.updateQueue: any);<br>      <span class="hljs-keyword">const</span> currentLastBaseUpdate = currentQueue.lastBaseUpdate;<br>      <span class="hljs-keyword">if</span> (currentLastBaseUpdate !== lastBaseUpdate) &#123;<br>        <span class="hljs-keyword">if</span> (currentLastBaseUpdate === <span class="hljs-literal">null</span>) &#123;<br>          currentQueue.firstBaseUpdate = firstPendingUpdate;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          currentLastBaseUpdate.next = firstPendingUpdate;<br>        &#125;<br>        currentQueue.lastBaseUpdate = lastPendingUpdate;<br>      &#125;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// These values may change as we process the queue.</span><br>  <span class="hljs-keyword">if</span> (firstBaseUpdate !== <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-comment">// Iterate through the list of updates to compute the result.</span><br>    <span class="hljs-keyword">let</span> newState = queue.baseState;<br>    <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> Don&#x27;t need to accumulate this. Instead, we can remove renderLanes</span><br>    <span class="hljs-comment">// from the original lanes.</span><br>    <span class="hljs-keyword">let</span> newLanes = NoLanes;<br><br>    <span class="hljs-keyword">let</span> newBaseState = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">let</span> newFirstBaseUpdate = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">let</span> newLastBaseUpdate = <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">let</span> update = firstBaseUpdate;<br>    <span class="hljs-keyword">do</span> &#123;<br>      <span class="hljs-keyword">const</span> updateLane = update.lane;<br>      <span class="hljs-keyword">const</span> updateEventTime = update.eventTime;<br>      <span class="hljs-keyword">if</span> (!isSubsetOfLanes(renderLanes, updateLane)) &#123;<br>        <span class="hljs-comment">// Priority is insufficient. Skip this update. If this is the first</span><br>        <span class="hljs-comment">// skipped update, the previous update/state is the new base</span><br>        <span class="hljs-comment">// update/state.</span><br>        <span class="hljs-keyword">const</span> clone: Update&lt;State&gt; = &#123;<br>          <span class="hljs-attr">eventTime</span>: updateEventTime,<br>          <span class="hljs-attr">lane</span>: updateLane,<br><br>          <span class="hljs-attr">tag</span>: update.tag,<br>          <span class="hljs-attr">payload</span>: update.payload,<br>          <span class="hljs-attr">callback</span>: update.callback,<br><br>          <span class="hljs-attr">next</span>: <span class="hljs-literal">null</span>,<br>        &#125;;<br>        <span class="hljs-keyword">if</span> (newLastBaseUpdate === <span class="hljs-literal">null</span>) &#123;<br>          newFirstBaseUpdate = newLastBaseUpdate = clone;<br>          newBaseState = newState;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          newLastBaseUpdate = newLastBaseUpdate.next = clone;<br>        &#125;<br>        <span class="hljs-comment">// Update the remaining priority in the queue.</span><br>        newLanes = mergeLanes(newLanes, updateLane);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// This update does have sufficient priority.</span><br><br>        <span class="hljs-keyword">if</span> (newLastBaseUpdate !== <span class="hljs-literal">null</span>) &#123;<br>          <span class="hljs-keyword">const</span> clone: Update&lt;State&gt; = &#123;<br>            <span class="hljs-attr">eventTime</span>: updateEventTime,<br>            <span class="hljs-comment">// This update is going to be committed so we never want uncommit</span><br>            <span class="hljs-comment">// it. Using NoLane works because 0 is a subset of all bitmasks, so</span><br>            <span class="hljs-comment">// this will never be skipped by the check above.</span><br>            <span class="hljs-attr">lane</span>: NoLane,<br><br>            <span class="hljs-attr">tag</span>: update.tag,<br>            <span class="hljs-attr">payload</span>: update.payload,<br>            <span class="hljs-attr">callback</span>: update.callback,<br><br>            <span class="hljs-attr">next</span>: <span class="hljs-literal">null</span>,<br>          &#125;;<br>          newLastBaseUpdate = newLastBaseUpdate.next = clone;<br>        &#125;<br><br>        <span class="hljs-comment">// Process this update.</span><br>        newState = getStateFromUpdate(<br>          workInProgress,<br>          queue,<br>          update,<br>          newState,<br>          props,<br>          instance<br>        );<br>        <span class="hljs-keyword">const</span> callback = update.callback;<br>        <span class="hljs-keyword">if</span> (<br>          callback !== <span class="hljs-literal">null</span> &amp;&amp;<br>          <span class="hljs-comment">// If the update was already committed, we should not queue its</span><br>          <span class="hljs-comment">// callback again.</span><br>          update.lane !== NoLane<br>        ) &#123;<br>          workInProgress.flags |= Callback;<br>          <span class="hljs-keyword">const</span> effects = queue.effects;<br>          <span class="hljs-keyword">if</span> (effects === <span class="hljs-literal">null</span>) &#123;<br>            queue.effects = [update];<br>          &#125; <span class="hljs-keyword">else</span> &#123;<br>            effects.push(update);<br>          &#125;<br>        &#125;<br>      &#125;<br>      update = update.next;<br>      <span class="hljs-keyword">if</span> (update === <span class="hljs-literal">null</span>) &#123;<br>        pendingQueue = queue.shared.pending;<br>        <span class="hljs-keyword">if</span> (pendingQueue === <span class="hljs-literal">null</span>) &#123;<br>          <span class="hljs-keyword">break</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-comment">// An update was scheduled from inside a reducer. Add the new</span><br>          <span class="hljs-comment">// pending updates to the end of the list and keep processing.</span><br>          <span class="hljs-keyword">const</span> lastPendingUpdate = pendingQueue;<br>          <span class="hljs-comment">// Intentionally unsound. Pending updates form a circular list, but we</span><br>          <span class="hljs-comment">// unravel them when transferring them to the base queue.</span><br>          <span class="hljs-keyword">const</span> firstPendingUpdate =<br>            ((lastPendingUpdate.next: any): Update&lt;State&gt;);<br>          lastPendingUpdate.next = <span class="hljs-literal">null</span>;<br>          update = firstPendingUpdate;<br>          queue.lastBaseUpdate = lastPendingUpdate;<br>          queue.shared.pending = <span class="hljs-literal">null</span>;<br>        &#125;<br>      &#125;<br>    &#125; <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>);<br><br>    <span class="hljs-keyword">if</span> (newLastBaseUpdate === <span class="hljs-literal">null</span>) &#123;<br>      newBaseState = newState;<br>    &#125;<br><br>    queue.baseState = ((newBaseState: any): State);<br>    queue.firstBaseUpdate = newFirstBaseUpdate;<br>    queue.lastBaseUpdate = newLastBaseUpdate;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>flushSyncCallbacks 函数会使得 React 开启一次新的 render 阶段</p></blockquote><h2 id="几个关于-setState-的问题的总结"><a href="#几个关于-setState-的问题的总结" class="headerlink" title="几个关于 setState 的问题的总结"></a>几个关于 setState 的问题的总结</h2><ol><li>setState 是同步还是异步<br>内部实现更新机制是异步，单纯的 setState 是同步方法，所以无法获取到最新的 state</li><li>setState(callback), callback 中为何可以取到最新的 state 值<br>笔记中忘记补了，这里大概描述下，setState 中在 update（即 fiber.updateQueue.shared.pending）上，在触发新的 render 阶段中回调才被执行，此时 state 已被更新;</li><li>为何 setTimeout 中也可以取得最新的 state<br>原理在于 event loop，当 setTimeout 回调执行时 React 已经更新完毕</li></ol><blockquote><p>ps: 仔细看了下源码，貌似并不一定。flushSyncCallbacks 中当发生异常时，未执行的更新队列会通过 ReactScheduler 重新调度（调度的部分后面做详细笔记），此时可能会有问题。<br>pps: 当前笔记仅针对 ReactDom.render，createRoot 采用的是 concurrent 模式<br>setTimeout 使用需谨慎</p></blockquote><h2 id="补充笔记"><a href="#补充笔记" class="headerlink" title="补充笔记"></a>补充笔记</h2><p>之前看的不够详细,enqueueSetState -&gt; scheduleUpdateOnFiber, scheduleUpdateOnFiber 中有一步判断会决定 setStat 是否立即执行更新<br>所以在setTimeout中连续执行setState时不会合并执行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">scheduleUpdateOnFiber</span>(<span class="hljs-params"></span></span><br><span class="hljs-params"><span class="hljs-function">  fiber: Fiber,</span></span><br><span class="hljs-params"><span class="hljs-function">  lane: Lane,</span></span><br><span class="hljs-params"><span class="hljs-function">  eventTime: number</span></span><br><span class="hljs-params"><span class="hljs-function"></span>): <span class="hljs-title">FiberRoot</span> | <span class="hljs-title">null</span> </span>&#123;<br>  <span class="hljs-comment">// ...</span><br>    <span class="hljs-keyword">if</span> (<br>      lane === SyncLane &amp;&amp;<br>      executionContext === NoContext &amp;&amp;<br>      (fiber.mode &amp; ConcurrentMode) === NoMode &amp;&amp;<br>      <span class="hljs-comment">// Treat `act` as if it&#x27;s inside `batchedUpdates`, even in legacy mode.</span><br>      !(__DEV__ &amp;&amp; ReactCurrentActQueue.isBatchingLegacy)<br>    ) &#123;<br>      <span class="hljs-comment">// Flush the synchronous work now, unless we&#x27;re already working or inside</span><br>      <span class="hljs-comment">// a batch. This is intentionally inside scheduleUpdateOnFiber instead of</span><br>      <span class="hljs-comment">// scheduleCallbackForFiber to preserve the ability to schedule a callback</span><br>      <span class="hljs-comment">// without immediately flushing it. We only do this for user-initiated</span><br>      <span class="hljs-comment">// updates, to preserve historical behavior of legacy mode.</span><br>      resetRenderTimer();<br>      flushSyncCallbacksOnlyInLegacyMode();<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> root;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>TODO: 待学习部分，ReactAct咋执行的，代码看麻了，看编译原理，学习基础去了</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>阿里云视频点播sdk扩展</title>
    <link href="/2021/12/22/1/"/>
    <url>/2021/12/22/1/</url>
    
    <content type="html"><![CDATA[<p>SDK：Javascript SDK   version-1.5.2<br><a href="https://help.aliyun.com/document_detail/52204.html">阿里云视频点播Javascript SDK文档</a></p><p>问题：该版本不支持指定单个文件暂停上传 or 指定目标文件开始上传。sdk提供的几个操作单文件的api支持不到这么细节的操作，deleteFile/cancelFile/resumeFile</p><p>源码解析：</p><blockquote><p>提取sdk代码中的一些关键枚举值</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> VODSTATE = &#123;<br>  <span class="hljs-attr">INIT</span>: <span class="hljs-string">&quot;Init&quot;</span>,<br>  <span class="hljs-attr">START</span>: <span class="hljs-string">&quot;Start&quot;</span>,<br>  <span class="hljs-attr">STOP</span>: <span class="hljs-string">&quot;Stop&quot;</span>,<br>  <span class="hljs-attr">FAILURE</span>: <span class="hljs-string">&quot;Failure&quot;</span>,<br>  <span class="hljs-attr">EXPIRE</span>: <span class="hljs-string">&quot;Expire&quot;</span>,<br>  <span class="hljs-attr">END</span>: <span class="hljs-string">&quot;End&quot;</span>,<br>&#125;;<br><span class="hljs-keyword">const</span> UPLOADSTATE = &#123;<br>  <span class="hljs-attr">INIT</span>: <span class="hljs-string">&quot;Ready&quot;</span>,<br>  <span class="hljs-attr">UPLOADING</span>: <span class="hljs-string">&quot;Uploading&quot;</span>,<br>  <span class="hljs-attr">SUCCESS</span>: <span class="hljs-string">&quot;Success&quot;</span>,<br>  <span class="hljs-attr">FAIlURE</span>: <span class="hljs-string">&quot;Failure&quot;</span>,<br>  <span class="hljs-attr">CANCELED</span>: <span class="hljs-string">&quot;Canceled&quot;</span>,<br>  <span class="hljs-attr">STOPED</span>: <span class="hljs-string">&quot;Stoped&quot;</span>,<br>&#125;;<br><br></code></pre></td></tr></table></figure><blockquote><p>uploader.cancelFile(index)  取消单个文件上传</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>  <span class="hljs-attr">key</span>: <span class="hljs-string">&quot;cancelFile&quot;</span>,<br>  <span class="hljs-attr">value</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.options;<br>    <span class="hljs-keyword">if</span> (e &lt; <span class="hljs-number">0</span> || e &gt;= <span class="hljs-built_in">this</span>._uploadList.length) <span class="hljs-keyword">return</span> !<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">var</span> t = <span class="hljs-built_in">this</span>._uploadList[e];<br>    <span class="hljs-comment">// 判断索引是否和当前操作的上传文件一致 &amp; 索引对应文件的上传状态是否是上传中</span><br>    <span class="hljs-keyword">if</span> (<br>      e == <span class="hljs-built_in">this</span>._curIndex &amp;&amp;<br>      t.state == a.UPLOADSTATE.UPLOADING<br>    ) &#123;<br>      t.state = a.UPLOADSTATE.CANCELED;<br>      <span class="hljs-comment">// 获取已成功上传的分片数据</span><br>      <span class="hljs-keyword">var</span> n = <span class="hljs-built_in">this</span>._getCheckoutpoint(t);<br>      n &amp;&amp; n.checkpoint &amp;&amp; (n = n.checkpoint),<br>      <span class="hljs-comment">// 分片数据存在则停止停止上传分片</span><br>        n &amp;&amp; <span class="hljs-built_in">this</span>._ossUpload.abort(t),<br>      <span class="hljs-comment">// 清楚分片数据缓存</span><br>        <span class="hljs-built_in">this</span>._removeCheckoutpoint(t),<br>      <span class="hljs-comment">// 继续开始下一个上传任务</span><br>        <span class="hljs-built_in">this</span>.nextUpload();<br>    &#125; <span class="hljs-keyword">else</span><br>      <span class="hljs-comment">// 上传状态不等于SUCCESS则直接修改为CANCELED</span><br>      t.state != a.UPLOADSTATE.SUCCESS &amp;&amp;<br>        (t.state = a.UPLOADSTATE.CANCELED);<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>._reportLog(<span class="hljs-string">&quot;20008&quot;</span>, t), !<span class="hljs-number">0</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>abort函数中调用了abortMultipartUpload方法<br><a href="https://help.aliyun.com/document_detail/31996.html">AbortMultipartUpload API文档</a>，调用这个相当于删除了已上传的分片数据并取消分片上传事件<br>说明这个方法不支持暂停上传，在这里我遇到个问题，恢复该文件上传后，异常提示报错：The specified upload does not exist. The upload ID may be invalid, or the upload may have been aborted or completed.<br>这个报错很好理解，结合代码调用，是因为该upload事件been aborted了</p><blockquote><p>结论：cancelFile 是中断上传任务且无法恢复，不能用做暂停处理</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>  <span class="hljs-attr">key</span>: <span class="hljs-string">&quot;abort&quot;</span>,<br>  <span class="hljs-attr">value</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (e.checkpoint) &#123;<br>      <span class="hljs-keyword">var</span> t = e.checkpoint.uploadId;<br>      <span class="hljs-built_in">this</span>.oss.abortMultipartUpload(e.object, t);<br>    &#125;<br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>uploader.deleteFile(index); 删除上传文件<br>调用了cancelFile后从上传文件列表中删除该文件</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>  <span class="hljs-attr">key</span>: <span class="hljs-string">&quot;deleteFile&quot;</span>,<br>  <span class="hljs-attr">value</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> (<br>      !!<span class="hljs-built_in">this</span>.cancelFile(e) &amp;&amp; (<span class="hljs-built_in">this</span>._uploadList.splice(e, <span class="hljs-number">1</span>), !<span class="hljs-number">0</span>)<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>uploader.resumeFile(index);  恢复单个文件上传        </p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>  <span class="hljs-attr">key</span>: <span class="hljs-string">&quot;resumeFile&quot;</span>,<br>  <span class="hljs-attr">value</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.options;<br>    <span class="hljs-keyword">if</span> (e &lt; <span class="hljs-number">0</span> || e &gt;= <span class="hljs-built_in">this</span>._uploadList.length) <span class="hljs-keyword">return</span> !<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">var</span> t = <span class="hljs-built_in">this</span>._uploadList[e];<br>    <span class="hljs-keyword">return</span> (<br>      t.state == a.UPLOADSTATE.CANCELED &amp;&amp;<br>      ((t.state = a.UPLOADSTATE.INIT), !<span class="hljs-number">0</span>)<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>从代码中看只是简单的判断了下状态是否为CANCELED &amp; 修改状态为INIT，没有其他处理，如何恢复上传呢<br>官方文档给的实例，在onUploadstarted回调事件中通过setUploadAuthAndAddress方法开始上传，其中调用了_uploadCore函数,<br>_uploadCore中创建了阿里云对象存储oss实例，并执行this._ossUpload.upload(e, u) 真正开始上传。其中的_complete回调中执行了_complete方法，表示上传完成后执行complete回调</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* _uploadCore */</span><br>&#123;<br>  <span class="hljs-attr">key</span>: <span class="hljs-string">&quot;_uploadCore&quot;</span>,<br>  <span class="hljs-attr">value</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;<br>    <span class="hljs-built_in">arguments</span>.length &gt; <span class="hljs-number">1</span> &amp;&amp;<br>      <span class="hljs-keyword">void</span> <span class="hljs-number">0</span> !== <span class="hljs-built_in">arguments</span>[<span class="hljs-number">1</span>] &amp;&amp;<br>      <span class="hljs-built_in">arguments</span>[<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">if</span> (<br>      !<span class="hljs-built_in">this</span>._ossCreditor.accessKeyId ||<br>      !<span class="hljs-built_in">this</span>._ossCreditor.accessKeySecret ||<br>      !<span class="hljs-built_in">this</span>._ossCreditor.securityToken<br>    )<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<br>        <span class="hljs-string">&quot;AccessKeyId、AccessKeySecret、securityToken should not be null&quot;</span><br>      );<br>    <span class="hljs-keyword">if</span> (((e.state = a.UPLOADSTATE.UPLOADING), !<span class="hljs-built_in">this</span>._ossUpload)) &#123;<br>      e.endpoint =<br>        e.endpoint || <span class="hljs-string">&quot;http://oss-cn-hangzhou.aliyuncs.com&quot;</span>;<br>      <span class="hljs-keyword">var</span> t = <span class="hljs-built_in">this</span>;<br>      <span class="hljs-built_in">this</span>._ossUpload = <span class="hljs-keyword">new</span> c.default(<br>        &#123;<br>          <span class="hljs-attr">bucket</span>: e.bucket,<br>          <span class="hljs-attr">endpoint</span>: e.endpoint,<br>          <span class="hljs-attr">AccessKeyId</span>: <span class="hljs-built_in">this</span>._ossCreditor.accessKeyId,<br>          <span class="hljs-attr">AccessKeySecret</span>: <span class="hljs-built_in">this</span>._ossCreditor.accessKeySecret,<br>          <span class="hljs-attr">SecurityToken</span>: <span class="hljs-built_in">this</span>._ossCreditor.securityToken,<br>          <span class="hljs-attr">timeout</span>: <span class="hljs-built_in">this</span>.options.timeout,<br>          <span class="hljs-attr">cname</span>: <span class="hljs-built_in">this</span>.options.cname,<br>        &#125;,<br>        &#123;<br>          <span class="hljs-attr">onerror</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e, n</span>) </span>&#123;<br>            t._error.call(t, e, n);<br>          &#125;,<br>          <span class="hljs-attr">oncomplete</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e, n</span>) </span>&#123;<br>            t._complete.call(t, e, n);<br>          &#125;,<br>          <span class="hljs-attr">onprogress</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e, n, r</span>) </span>&#123;<br>            t._progress.call(t, e, n, r);<br>          &#125;,<br>        &#125;<br>      );<br>    &#125;<br>    <span class="hljs-keyword">var</span> n = y.default.getFileType(e.file.name),<br>      r = <span class="hljs-built_in">this</span>._getCheckoutpoint(e),<br>      o = <span class="hljs-string">&quot;&quot;</span>,<br>      i = <span class="hljs-string">&quot;&quot;</span>;<br>    r &amp;&amp;<br>      r.checkpoint &amp;&amp;<br>      ((i = r.state), (o = r.videoId), (r = r.checkpoint)),<br>      r &amp;&amp;<br>        o == e.videoId &amp;&amp;<br>        i != a.UPLOADSTATE.UPLOADING &amp;&amp;<br>        ((r.file = e.file), (e.checkpoint = r), r.uploadId);<br>    <span class="hljs-keyword">var</span> s = <span class="hljs-built_in">this</span>._adjustPartSize(e);<br>    <span class="hljs-built_in">this</span>._reportLog(<span class="hljs-string">&quot;20002&quot;</span>, e, &#123;<br>      <span class="hljs-attr">ft</span>: n,<br>      <span class="hljs-attr">fs</span>: e.file.size,<br>      <span class="hljs-attr">bu</span>: e.bucket,<br>      <span class="hljs-attr">ok</span>: e.object,<br>      <span class="hljs-attr">vid</span>: e.videoId || <span class="hljs-string">&quot;&quot;</span>,<br>      <span class="hljs-attr">fn</span>: e.file.name,<br>      <span class="hljs-attr">fw</span>: <span class="hljs-literal">null</span>,<br>      <span class="hljs-attr">fh</span>: <span class="hljs-literal">null</span>,<br>      <span class="hljs-attr">ps</span>: s,<br>    &#125;);<br>    <span class="hljs-keyword">var</span> u = &#123;<br>      <span class="hljs-attr">headers</span>: &#123;<br>        <span class="hljs-string">&quot;x-oss-notification&quot;</span>: e.userData ? e.userData : <span class="hljs-string">&quot;&quot;</span>,<br>      &#125;,<br>      <span class="hljs-attr">partSize</span>: s,<br>      <span class="hljs-attr">parallel</span>: <span class="hljs-built_in">this</span>.options.parallel,<br>    &#125;;<br>    <span class="hljs-built_in">this</span>._ossUpload.upload(e, u);<br>  &#125;,<br>&#125;<br><span class="hljs-comment">/* _complete */</span><br>&#123;<br>  <span class="hljs-attr">key</span>: <span class="hljs-string">&quot;_complete&quot;</span>,<br>  <span class="hljs-attr">value</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e, t</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (<br>      ((e.state = a.UPLOADSTATE.SUCCESS),<br>      <span class="hljs-built_in">this</span>.options.onUploadSucceed)<br>    )<br>      <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-built_in">this</span>.options.onUploadSucceed(e);<br>      &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>        <span class="hljs-built_in">console</span>.log(e);<br>      &#125;<br>    <span class="hljs-keyword">var</span> n = <span class="hljs-number">0</span>;<br>    t &amp;&amp;<br>      t.res &amp;&amp;<br>      t.res.headers &amp;&amp;<br>      (n = t.res.headers[<span class="hljs-string">&quot;x-oss-request-id&quot;</span>]),<br>      <span class="hljs-built_in">this</span>._removeCheckoutpoint(e);<br>    <span class="hljs-keyword">var</span> r = <span class="hljs-built_in">this</span>;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      r.nextUpload();<br>    &#125;, <span class="hljs-number">100</span>),<br>      (<span class="hljs-built_in">this</span>._retryCount = <span class="hljs-number">0</span>),<br>      <span class="hljs-built_in">this</span>._reportLog(<span class="hljs-string">&quot;20003&quot;</span>, e, &#123; <span class="hljs-attr">requestId</span>: n &#125;);<br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><p>注意到_complete中干了什么</p><ol><li>抛出onUploadSucceed回调到用户层，通知该文件上传成功</li><li>移除本地保存分片数据</li><li>100ms后执行nextUpload<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* nextUpload */</span><br>&#123;<br>  <span class="hljs-attr">key</span>: <span class="hljs-string">&quot;nextUpload&quot;</span>,<br>  <span class="hljs-attr">value</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> e = <span class="hljs-built_in">this</span>.options;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>._state == a.VODSTATE.START)<br>      <span class="hljs-keyword">if</span> (<br>        ((<span class="hljs-built_in">this</span>._curIndex = <span class="hljs-built_in">this</span>._findUploadIndex()),<br>        -<span class="hljs-number">1</span> != <span class="hljs-built_in">this</span>._curIndex)<br>      ) &#123;<br>        <span class="hljs-keyword">var</span> t = <span class="hljs-built_in">this</span>._uploadList[<span class="hljs-built_in">this</span>._curIndex];<br>        (<span class="hljs-built_in">this</span>._ossUpload = <span class="hljs-literal">null</span>), <span class="hljs-built_in">this</span>._upload(t);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">this</span>._state = a.VODSTATE.END;<br>        <span class="hljs-keyword">try</span> &#123;<br>          e.onUploadEnd &amp;&amp; e.onUploadEnd(t);<br>        &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>          <span class="hljs-built_in">console</span>.log(e);<br>        &#125;<br>      &#125;<br>  &#125;,<br>&#125;<br><span class="hljs-comment">/* _findUploadIndex */</span><br>&#123;<br>  <span class="hljs-attr">key</span>: <span class="hljs-string">&quot;_findUploadIndex&quot;</span>,<br>  <span class="hljs-attr">value</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> e = -<span class="hljs-number">1</span>, t = <span class="hljs-number">0</span>; t &lt; <span class="hljs-built_in">this</span>._uploadList.length; t++)<br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>._uploadList[t].state == a.UPLOADSTATE.INIT) &#123;<br>        e = t;<br>        <span class="hljs-keyword">break</span>;<br>      &#125;<br>    <span class="hljs-keyword">return</span> e;<br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure>nextUpload中执行逻辑</li><li>判断uploader上传器状态是否为VODSTATE.START</li><li>查找上传文件（_findUploadIndex逻辑，查找第一个上传状态为INIT的文件）</li><li>上一步中查找到文件，则开始上传该文件</li><li>否则说明所有文件上传结束，标记uploader状态为VODSTATE.END &amp; 抛出onUploadEnd回调</li></ol><p>到这里就好理解了，为何resumeFile只是更改状态没有做其他操作，因为当有某个文件结束上传任务时会自动运行下一个INIT状态的上传任务</p><p>看到这里大概能理解为什么官方文档中推荐不要使用批量上传了，如果单个文件调用cancelFile后再调用resumeFile是不可能恢复 上传的，因为不会有其他文件上传结束触发nextUpload，而且cancelFile是取消上传job，resumeFile再恢复必报错。这里就比较疑惑了，因为resumeFile中判断CANCELED状态说明必然是跟在cancelFile后使用的</p><blockquote><p>为了实现业务逻辑，扩展了几个方法实现</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> (AliyunUpload.Vod) &#123;<br>  <span class="hljs-keyword">const</span> VODSTATE = &#123;<br>    <span class="hljs-attr">INIT</span>: <span class="hljs-string">&#x27;Init&#x27;</span>,<br>    <span class="hljs-attr">START</span>: <span class="hljs-string">&#x27;Start&#x27;</span>,<br>    <span class="hljs-attr">STOP</span>: <span class="hljs-string">&#x27;Stop&#x27;</span>,<br>    <span class="hljs-attr">FAILURE</span>: <span class="hljs-string">&#x27;Failure&#x27;</span>,<br>    <span class="hljs-attr">EXPIRE</span>: <span class="hljs-string">&#x27;Expire&#x27;</span>,<br>    <span class="hljs-attr">END</span>: <span class="hljs-string">&#x27;End&#x27;</span><br>  &#125;<br>  <span class="hljs-keyword">const</span> UPLOADSTATE = &#123;<br>    <span class="hljs-attr">INIT</span>: <span class="hljs-string">&#x27;Ready&#x27;</span>,<br>    <span class="hljs-attr">UPLOADING</span>: <span class="hljs-string">&#x27;Uploading&#x27;</span>,<br>    <span class="hljs-attr">SUCCESS</span>: <span class="hljs-string">&#x27;Success&#x27;</span>,<br>    <span class="hljs-attr">FAIlURE</span>: <span class="hljs-string">&#x27;Failure&#x27;</span>,<br>    <span class="hljs-attr">CANCELED</span>: <span class="hljs-string">&#x27;Canceled&#x27;</span>,<br>    <span class="hljs-attr">STOPED</span>: <span class="hljs-string">&#x27;Stoped&#x27;</span><br>  &#125;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 重启停止的文件上传</span><br><span class="hljs-comment">   */</span><br>  AliyunUpload.Vod.prototype.restartFile = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">index</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>._retryCount = <span class="hljs-number">0</span><br>    <span class="hljs-built_in">this</span>.options<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>._state == VODSTATE.START || <span class="hljs-built_in">this</span>._state == VODSTATE.EXPIRE) &#123;<br>      <span class="hljs-built_in">console</span>.warn(<span class="hljs-string">&#x27;already started or expired&#x27;</span>)<br>      <span class="hljs-keyword">return</span><br>    &#125;<br>    <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">0</span> || index &gt;= <span class="hljs-built_in">this</span>._uploadList.length) &#123;<br>      <span class="hljs-keyword">return</span><br>    &#125;<br>    <span class="hljs-keyword">var</span> t = <span class="hljs-built_in">this</span>._uploadList[index]<br>    <span class="hljs-built_in">this</span>._ossUpload = <span class="hljs-literal">null</span><br>    <span class="hljs-built_in">this</span>._initState()<br>    <span class="hljs-built_in">this</span>._upload(t)<br>    <span class="hljs-built_in">this</span>._state = VODSTATE.START<br>  &#125;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 从索引位置开始查找待上传的文件索引</span><br><span class="hljs-comment">   * 如果不存在则从首个位置到索引位置中查找</span><br><span class="hljs-comment">   */</span><br>  AliyunUpload.Vod.prototype.findIndexOfWaiting = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">index = <span class="hljs-number">0</span></span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">0</span> || index + <span class="hljs-number">1</span> &gt;= <span class="hljs-built_in">this</span>._uploadList.length) &#123;<br>      <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br>    &#125;<br>    <span class="hljs-keyword">let</span> indexList = []<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">this</span>._uploadList.length; i++) &#123;<br>      <span class="hljs-keyword">const</span> item = <span class="hljs-built_in">this</span>._uploadList[i]<br>      <span class="hljs-keyword">if</span> (item.state === UPLOADSTATE.INIT) &#123;<br>        <span class="hljs-keyword">if</span> (i &lt; index) indexList.push(i)<br>        <span class="hljs-keyword">if</span> (i &gt; index) &#123;<br>          <span class="hljs-keyword">return</span> i<br>        &#125;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> indexList.length &gt; <span class="hljs-number">0</span> ? indexList[<span class="hljs-number">0</span>] : -<span class="hljs-number">1</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>简单的使用场景流程DEMO，这里还有个问题在于，stopUpload会更改文件状态为STOP，自动开始下一个任务时不会执行STOP状态的任务，需要手动开始，不过问题不大，所以不做更多改造了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/** 暂停单个文件上传 */</span><br><span class="hljs-function"><span class="hljs-title">pause</span>(<span class="hljs-params">index</span>)</span> &#123;<br>  <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.uploader == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <br>  <span class="hljs-built_in">this</span>.uploader.stopUpload()<br>  <span class="hljs-comment">// 获取上传文件列表</span><br>  <span class="hljs-keyword">const</span> uploadFiles = <span class="hljs-built_in">this</span>.uploader.listFiles()<br>  <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">0</span> || index &gt; uploadFiles.length) <span class="hljs-keyword">return</span><br>  <span class="hljs-comment">// 获取下一个可执行上传的上传文件</span><br>  <span class="hljs-keyword">const</span> waitingIndex = <span class="hljs-built_in">this</span>.uploader.findIndexOfWaiting(index)<br>  <span class="hljs-comment">// 自动开始下一个上传任务</span><br>  <span class="hljs-keyword">if</span> (waitingIndex &gt;= <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-built_in">this</span>.uploader.restartFile(waitingIndex)<br>  &#125;<br>&#125;,<br><span class="hljs-comment">/** 删除单个上传文件 */</span><br><span class="hljs-function"><span class="hljs-title">del</span>(<span class="hljs-params">index</span>)</span> &#123;<br>  <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.uploader == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <br>  <span class="hljs-built_in">this</span>.uploader.deleteFile(index)<br>&#125;,<br><span class="hljs-comment">/** 恢复单个文件上传 */</span><br><span class="hljs-function"><span class="hljs-title">resume</span>(<span class="hljs-params">index</span>)</span> &#123;<br>  <span class="hljs-built_in">this</span>.uploader.restartFile(index)<br>&#125;,<br></code></pre></td></tr></table></figure><p>stopUpload配合其他几个扩展方法为何能实现单个文件上传的暂停/恢复就不具体做源码解析了，说明下大概流程</p><ol><li>stopUpload =&gt; 停止当前正常执行的任务，执行_changeState方法，执行ossUpload.cancel取消上传（和abort不同，可以理解为暂时停止了当前的oss上传）</li><li>_changeState中获取了当前已成功上传的分片数据，并保存到localStorage中</li><li>这些保存的分片数据会在开始上传的时候回传到oss，具体逻辑可以参考<a href="https://help.aliyun.com/document_detail/52204.html?spm=a2c4g.11186623.0.0.131d6515sHP4SQ#title-235-ywd-zkh">阿里云视频点播-断点续传</a>，<a href="https://help.aliyun.com/document_detail/31850.html?spm=5176.21213303.J_6028563670.19.3bde3edavQ9Y21&scm=20140722.S_help@@%E6%96%87%E6%A1%A3@@31850.S_hot.ID_31850-RL_%E6%96%AD%E7%82%B9-OR_s+helpmain-V_1-P0_2">oss-分片上传和断点续传</a></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>How to disable predictive scrolling</title>
    <link href="/2021/12/22/2/"/>
    <url>/2021/12/22/2/</url>
    
    <content type="html"><![CDATA[<p>最近做一个全屏滚动的效果，类似 fullPage，之所以没用一个因为 fullPage 的开源协议是 GPL，另一个是需求上没有 fullPage 那么多兼容支持，就想着自己写一个。</p><p>想法挺好，大致的实现思路也简单：</p><ol><li>body 或者外层套一个 div 设置高宽 100vw,100vh，并且禁止溢出</li><li>每一屏一个容器 container，并且使用一个 wrapper 容器包裹起来</li><li>初始化时设置 container 的高度为当前窗口高度，宽度为 100%</li><li>监听 wheel 事件，每次发生滚动时，记录下当前滚动到第几屏，计算 y 值，设置 wrapper 的 transform 让页面上下滚动起来</li></ol><blockquote><p>Demo 不考虑兼容性，实战的同学看下实现思路即可</p></blockquote><p>大致的效果：<a href="https://moring-abyss.github.io/example/1.html" target="_blank">页面 Demo</a>，代码可以直接查看网页源代码</p><p>这里遇见个问题，无论是 wheel 还是 scroll 事件，滑轮轻轻的滚动一次都会造成 n 次的回调被执行,我们期望的结果是在滚动完成之前只执行一次，严格来说回调执行几次都不 care，最关键的发生滚动的步骤只能执行一次</p><p>最开始的思路挺多，因为可以预设 transition 动画的执行时间，有了这个时间有很多中解决方法，例如节流函数，或者 setTimeout or 监听 transitionend 事件</p><p>最后选择了 fullPage 一样的方式，设置滚动状态，通过 setTimeout 重置的方式</p><p>我以为我解决了这个问题，直到我用触控板触发滚动滑动….</p><blockquote><p>正题来了 How to disable predictive scrolling</p></blockquote><p>预测滚动，即当手指离开触控板后滚动仍会持续一段时间，查询国内外文章，大部分都指向 stackoverflow 的这个<a href="https://stackoverflow.com/questions/34831120/disable-predictive-scrolling-mousewheel-onscroll-event-fires-too-often-touc">问题</a></p><p><b>简单概括一下就是：目前没有办法解决</b></p><blockquote><p>触控板不会触发 touch 事件，实验性质的 PointEvent 目前支持的也不好，单指和双指点按滑动的触发事件也解决不了这个问题</p></blockquote><p>然后我发现 fullPage 没有这个 bug，于是我决定扌…额，学习一下大佬怎么解决的…</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> (canScroll) &#123;<br>  <span class="hljs-keyword">if</span> (isScrollingVertically &amp;&amp; isAccelerating) &#123;<br>    <span class="hljs-comment">/* doing scroll */</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>以上是关键代码,canScroll 的性质和我的思路一致，解决预测性滚动的关键点在于内部的 if 判断上。</p><p>isScrollingVertically:用来做是否垂直滚动的判断的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> horizontalDetection =<br>  <span class="hljs-keyword">typeof</span> e.wheelDeltaX !== <span class="hljs-string">&quot;undefined&quot;</span> || <span class="hljs-keyword">typeof</span> e.deltaX !== <span class="hljs-string">&quot;undefined&quot;</span>;<br><br><span class="hljs-keyword">var</span> isScrollingVertically =<br>  <span class="hljs-built_in">Math</span>.abs(e.wheelDeltaX) &lt; <span class="hljs-built_in">Math</span>.abs(e.wheelDelta) ||<br>  <span class="hljs-built_in">Math</span>.abs(e.deltaX) &lt; <span class="hljs-built_in">Math</span>.abs(e.deltaY) ||<br>  !horizontalDetection;<br></code></pre></td></tr></table></figure><p>isAccelerating 的计算逻辑：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> scrollings = []<br><span class="hljs-keyword">let</span> prevTime = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getTime()<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">wheel</span>(<span class="hljs-params">e</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (scrollings.length &gt; <span class="hljs-number">149</span>) &#123;<br>    scrollings.shift();<br>  &#125;<br><br>  <span class="hljs-keyword">var</span> value = e.wheelDelta || -e.deltaY || -e.detail;<br>  <span class="hljs-keyword">var</span> curTime = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getTime();<br>  scrollings.push(<span class="hljs-built_in">Math</span>.abs(value));<br>  <span class="hljs-comment">// 上面这段逻辑很好理解，记录本次（包括本次）之前的150次的滑动距离</span><br><br>  <span class="hljs-keyword">var</span> timeDiff = curTime - prevTime;<br>  prevTime = curTime;<br>  <span class="hljs-keyword">if</span> (timeDiff &gt; <span class="hljs-number">200</span>) &#123;<br>    scrollings = [];<br>  &#125; <br>  <span class="hljs-comment">// 这段逻辑是用来处理当本次事件执行与上次执行超过200ms时就可以认为这是第二次鼠标/触控板滑动触发</span><br>  <span class="hljs-comment">// Q：200这个时间怎么定的，不太理解</span><br><br>  <span class="hljs-comment">// getAverage函数是从scrollings中取出指定索引往后的所有元素的平均数</span><br>  <span class="hljs-comment">// 那整个逻辑就好理解了，fullPage的作者通过记录前150次的滚动距离，并通过计算最后70次的平均滚动距离和最后10次的平均滚动距离，如果最后10次的不小于最后70次说明非预测性滚动</span><br>  <span class="hljs-keyword">var</span> averageEnd = getAverage(scrollings, <span class="hljs-number">10</span>);<br>  <span class="hljs-keyword">var</span> averageMiddle = getAverage(scrollings, <span class="hljs-number">70</span>);<br>  <span class="hljs-keyword">var</span> isAccelerating = averageEnd &gt;= averageMiddle;<br>  <span class="hljs-comment">// 特别说明下，不明白的可以试验下，预测性滚动的最后几次滚动距离较小，这种判断方式目前看来没啥问题，贼强</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getAverage</span>(<span class="hljs-params">elements, number</span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> sum = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">var</span> lastElements = elements.slice(<span class="hljs-built_in">Math</span>.max(elements.length - number, <span class="hljs-number">1</span>));<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; lastElements.length; i++) &#123;<br>    sum = sum + lastElements[i];<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.ceil(sum / number);<br>&#125;<br></code></pre></td></tr></table></figure><br />加了这些逻辑的<a href="https://moring-abyss.github.io/example/2.html">Demo</a>效果  <br /><br /><blockquote><p>ps: resize事件中因需要重新设置子元素高度和transform，如果事先移除transition动画效果会造成页面大幅度的抖动</p></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
