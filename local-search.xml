<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/01/13/a/"/>
    <url>/2022/01/13/a/</url>
    
    <content type="html"><![CDATA[export function scheduleUpdateOnFiber(  fiber: Fiber,  lane: Lane,  eventTime: number): FiberRoot | null {  // ...    if (      lane === SyncLane &&      executionContext === NoContext &&      (fiber.mode & ConcurrentMode) === NoMode &&      // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.      !(__DEV__ && ReactCurrentActQueue.isBatchingLegacy)    ) {      // Flush the synchronous work now, unless we're already working or inside      // a batch. This is intentionally inside scheduleUpdateOnFiber instead of      // scheduleCallbackForFiber to preserve the ability to schedule a callback      // without immediately flushing it. We only do this for user-initiated      // updates, to preserve historical behavior of legacy mode.      resetRenderTimer();      flushSyncCallbacksOnlyInLegacyMode();    }  }  return root;}]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>React-setState深入</title>
    <link href="/2022/01/09/3/"/>
    <url>/2022/01/09/3/</url>
    
    <content type="html"><![CDATA[<blockquote><p>React-18.0.0</p></blockquote><p>面试经常问到 setState 是同步还是异步，这里就这个问题研究下源码实现，调试并记录。</p><h2 id="setState-实现"><a href="#setState-实现" class="headerlink" title="setState 实现"></a>setState 实现</h2><h3 id="ReactFiberClassComponent-new"><a href="#ReactFiberClassComponent-new" class="headerlink" title="ReactFiberClassComponent.new"></a>ReactFiberClassComponent.new</h3><p>调用 classComponentUpdater.enqueueSetState，该方法内部实现会在 fiber 节点上挂载一个任务队列：updateQueue，数据结构参考：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> fiber = &#123;<br>  <span class="hljs-attr">updateQueue</span>: &#123;<br>    <span class="hljs-attr">shared</span>: &#123;<br>      <span class="hljs-comment">// ...</span><br>      <span class="hljs-attr">pending</span>: &#123;<br>        <span class="hljs-comment">// ...</span><br>        <span class="hljs-attr">next</span>: &#123;&#125;,<br>      &#125;,<br>    &#125;,<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p>链表结构，多次调用 setState 时如何合并的关键代码如下。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">enqueueUpdate</span>&lt;<span class="hljs-title">State</span>&gt;(<span class="hljs-params"></span></span><br><span class="hljs-params"><span class="hljs-function">  fiber: Fiber,</span></span><br><span class="hljs-params"><span class="hljs-function">  update: Update&lt;State&gt;,</span></span><br><span class="hljs-params"><span class="hljs-function">  lane: Lane</span></span><br><span class="hljs-params"><span class="hljs-function"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> updateQueue = fiber.updateQueue;<br>  <span class="hljs-keyword">if</span> (updateQueue === <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-comment">// Only occurs if the fiber has been unmounted.</span><br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">const</span> sharedQueue: SharedQueue&lt;State&gt; = (updateQueue: any).shared;<br><br>  <span class="hljs-keyword">if</span> (isInterleavedUpdate(fiber, lane)) &#123;<br>    <span class="hljs-keyword">const</span> interleaved = sharedQueue.interleaved;<br>    <span class="hljs-keyword">if</span> (interleaved === <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-comment">// This is the first update. Create a circular list.</span><br>      update.next = update;<br>      <span class="hljs-comment">// At the end of the current render, this queue&#x27;s interleaved updates will</span><br>      <span class="hljs-comment">// be transferred to the pending queue.</span><br>      pushInterleavedQueue(sharedQueue);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      update.next = interleaved.next;<br>      interleaved.next = update;<br>    &#125;<br>    sharedQueue.interleaved = update;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">const</span> pending = sharedQueue.pending;<br>    <span class="hljs-keyword">if</span> (pending === <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-comment">// This is the first update. Create a circular list.</span><br>      update.next = update;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      update.next = pending.next;<br>      pending.next = update;<br>    &#125;<br>    sharedQueue.pending = update;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>到这一步 setState 方法就差不多结束了，并没有真正的修改 state 值也没有渲染页面。<br>所以最初学习 React 时的疑问就解决了一个，为什么调用了 setState 后取 this.state 值仍然不变？</p><p>接下来了解是 React 触发执行任务队列的时机以及同一个 state 值的合并机制</p><h2 id="触发的时机"><a href="#触发的时机" class="headerlink" title="触发的时机"></a>触发的时机</h2><p>ReactDom.render 入口函数中，listenToAllSupportedEvents 给 container 注册了所有支持的事件监听<br>调用链：listenToAllSupportedEvents -&gt; listenToNativeEvent -&gt; addTrappedEventListener -&gt; createEventListenerWrapperWithPriority</p><blockquote><p>createEventListenerWrapperWithPriority 注册的监听事件中最终都指向 dispatchEvent 函数</p></blockquote><p>逐步调试 =&gt; attemptToDispatchEvent -&gt; dispatchEventForPluginEventSystem -&gt; batchedUpdates -&gt; batchedUpdatesImpl -&gt; flushSyncCallbacksOnlyInLegacyMode -&gt; flushSyncCallbacks</p><blockquote><p>batchedUpdates 实现方法在 ReactFiberWorkLoop.new.js 中</p></blockquote><p>回到最初的起点.</p><h2 id="何时合并"><a href="#何时合并" class="headerlink" title="何时合并"></a>何时合并</h2><p>processUpdateQueue 中取出 updateQueue 队列，从链表的尾部往前提取 task 执行合并 state<br>源码部分：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">processUpdateQueue</span>&lt;<span class="hljs-title">State</span>&gt;(<span class="hljs-params"></span></span><br><span class="hljs-params"><span class="hljs-function">  workInProgress: Fiber,</span></span><br><span class="hljs-params"><span class="hljs-function">  props: any,</span></span><br><span class="hljs-params"><span class="hljs-function">  instance: any,</span></span><br><span class="hljs-params"><span class="hljs-function">  renderLanes: Lanes</span></span><br><span class="hljs-params"><span class="hljs-function"></span>): <span class="hljs-title">void</span> </span>&#123;<br>  <span class="hljs-comment">// This is always non-null on a ClassComponent or HostRoot</span><br>  <span class="hljs-keyword">const</span> queue: UpdateQueue&lt;State&gt; = (workInProgress.updateQueue: any);<br><br>  hasForceUpdate = <span class="hljs-literal">false</span>;<br><br>  <span class="hljs-keyword">if</span> (__DEV__) &#123;<br>    currentlyProcessingQueue = queue.shared;<br>  &#125;<br><br>  <span class="hljs-keyword">let</span> firstBaseUpdate = queue.firstBaseUpdate;<br>  <span class="hljs-keyword">let</span> lastBaseUpdate = queue.lastBaseUpdate;<br><br>  <span class="hljs-comment">// Check if there are pending updates. If so, transfer them to the base queue.</span><br>  <span class="hljs-keyword">let</span> pendingQueue = queue.shared.pending;<br>  <span class="hljs-keyword">if</span> (pendingQueue !== <span class="hljs-literal">null</span>) &#123;<br>    queue.shared.pending = <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-comment">// The pending queue is circular. Disconnect the pointer between first</span><br>    <span class="hljs-comment">// and last so that it&#x27;s non-circular.</span><br>    <span class="hljs-keyword">const</span> lastPendingUpdate = pendingQueue;<br>    <span class="hljs-keyword">const</span> firstPendingUpdate = lastPendingUpdate.next;<br>    lastPendingUpdate.next = <span class="hljs-literal">null</span>;<br>    <span class="hljs-comment">// Append pending updates to base queue</span><br>    <span class="hljs-keyword">if</span> (lastBaseUpdate === <span class="hljs-literal">null</span>) &#123;<br>      firstBaseUpdate = firstPendingUpdate;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      lastBaseUpdate.next = firstPendingUpdate;<br>    &#125;<br>    lastBaseUpdate = lastPendingUpdate;<br><br>    <span class="hljs-comment">// If there&#x27;s a current queue, and it&#x27;s different from the base queue, then</span><br>    <span class="hljs-comment">// we need to transfer the updates to that queue, too. Because the base</span><br>    <span class="hljs-comment">// queue is a singly-linked list with no cycles, we can append to both</span><br>    <span class="hljs-comment">// lists and take advantage of structural sharing.</span><br>    <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> Pass `current` as argument</span><br>    <span class="hljs-keyword">const</span> current = workInProgress.alternate;<br>    <span class="hljs-keyword">if</span> (current !== <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-comment">// This is always non-null on a ClassComponent or HostRoot</span><br>      <span class="hljs-keyword">const</span> currentQueue: UpdateQueue&lt;State&gt; = (current.updateQueue: any);<br>      <span class="hljs-keyword">const</span> currentLastBaseUpdate = currentQueue.lastBaseUpdate;<br>      <span class="hljs-keyword">if</span> (currentLastBaseUpdate !== lastBaseUpdate) &#123;<br>        <span class="hljs-keyword">if</span> (currentLastBaseUpdate === <span class="hljs-literal">null</span>) &#123;<br>          currentQueue.firstBaseUpdate = firstPendingUpdate;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          currentLastBaseUpdate.next = firstPendingUpdate;<br>        &#125;<br>        currentQueue.lastBaseUpdate = lastPendingUpdate;<br>      &#125;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// These values may change as we process the queue.</span><br>  <span class="hljs-keyword">if</span> (firstBaseUpdate !== <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-comment">// Iterate through the list of updates to compute the result.</span><br>    <span class="hljs-keyword">let</span> newState = queue.baseState;<br>    <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> Don&#x27;t need to accumulate this. Instead, we can remove renderLanes</span><br>    <span class="hljs-comment">// from the original lanes.</span><br>    <span class="hljs-keyword">let</span> newLanes = NoLanes;<br><br>    <span class="hljs-keyword">let</span> newBaseState = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">let</span> newFirstBaseUpdate = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">let</span> newLastBaseUpdate = <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">let</span> update = firstBaseUpdate;<br>    <span class="hljs-keyword">do</span> &#123;<br>      <span class="hljs-keyword">const</span> updateLane = update.lane;<br>      <span class="hljs-keyword">const</span> updateEventTime = update.eventTime;<br>      <span class="hljs-keyword">if</span> (!isSubsetOfLanes(renderLanes, updateLane)) &#123;<br>        <span class="hljs-comment">// Priority is insufficient. Skip this update. If this is the first</span><br>        <span class="hljs-comment">// skipped update, the previous update/state is the new base</span><br>        <span class="hljs-comment">// update/state.</span><br>        <span class="hljs-keyword">const</span> clone: Update&lt;State&gt; = &#123;<br>          <span class="hljs-attr">eventTime</span>: updateEventTime,<br>          <span class="hljs-attr">lane</span>: updateLane,<br><br>          <span class="hljs-attr">tag</span>: update.tag,<br>          <span class="hljs-attr">payload</span>: update.payload,<br>          <span class="hljs-attr">callback</span>: update.callback,<br><br>          <span class="hljs-attr">next</span>: <span class="hljs-literal">null</span>,<br>        &#125;;<br>        <span class="hljs-keyword">if</span> (newLastBaseUpdate === <span class="hljs-literal">null</span>) &#123;<br>          newFirstBaseUpdate = newLastBaseUpdate = clone;<br>          newBaseState = newState;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          newLastBaseUpdate = newLastBaseUpdate.next = clone;<br>        &#125;<br>        <span class="hljs-comment">// Update the remaining priority in the queue.</span><br>        newLanes = mergeLanes(newLanes, updateLane);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// This update does have sufficient priority.</span><br><br>        <span class="hljs-keyword">if</span> (newLastBaseUpdate !== <span class="hljs-literal">null</span>) &#123;<br>          <span class="hljs-keyword">const</span> clone: Update&lt;State&gt; = &#123;<br>            <span class="hljs-attr">eventTime</span>: updateEventTime,<br>            <span class="hljs-comment">// This update is going to be committed so we never want uncommit</span><br>            <span class="hljs-comment">// it. Using NoLane works because 0 is a subset of all bitmasks, so</span><br>            <span class="hljs-comment">// this will never be skipped by the check above.</span><br>            <span class="hljs-attr">lane</span>: NoLane,<br><br>            <span class="hljs-attr">tag</span>: update.tag,<br>            <span class="hljs-attr">payload</span>: update.payload,<br>            <span class="hljs-attr">callback</span>: update.callback,<br><br>            <span class="hljs-attr">next</span>: <span class="hljs-literal">null</span>,<br>          &#125;;<br>          newLastBaseUpdate = newLastBaseUpdate.next = clone;<br>        &#125;<br><br>        <span class="hljs-comment">// Process this update.</span><br>        newState = getStateFromUpdate(<br>          workInProgress,<br>          queue,<br>          update,<br>          newState,<br>          props,<br>          instance<br>        );<br>        <span class="hljs-keyword">const</span> callback = update.callback;<br>        <span class="hljs-keyword">if</span> (<br>          callback !== <span class="hljs-literal">null</span> &amp;&amp;<br>          <span class="hljs-comment">// If the update was already committed, we should not queue its</span><br>          <span class="hljs-comment">// callback again.</span><br>          update.lane !== NoLane<br>        ) &#123;<br>          workInProgress.flags |= Callback;<br>          <span class="hljs-keyword">const</span> effects = queue.effects;<br>          <span class="hljs-keyword">if</span> (effects === <span class="hljs-literal">null</span>) &#123;<br>            queue.effects = [update];<br>          &#125; <span class="hljs-keyword">else</span> &#123;<br>            effects.push(update);<br>          &#125;<br>        &#125;<br>      &#125;<br>      update = update.next;<br>      <span class="hljs-keyword">if</span> (update === <span class="hljs-literal">null</span>) &#123;<br>        pendingQueue = queue.shared.pending;<br>        <span class="hljs-keyword">if</span> (pendingQueue === <span class="hljs-literal">null</span>) &#123;<br>          <span class="hljs-keyword">break</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-comment">// An update was scheduled from inside a reducer. Add the new</span><br>          <span class="hljs-comment">// pending updates to the end of the list and keep processing.</span><br>          <span class="hljs-keyword">const</span> lastPendingUpdate = pendingQueue;<br>          <span class="hljs-comment">// Intentionally unsound. Pending updates form a circular list, but we</span><br>          <span class="hljs-comment">// unravel them when transferring them to the base queue.</span><br>          <span class="hljs-keyword">const</span> firstPendingUpdate =<br>            ((lastPendingUpdate.next: any): Update&lt;State&gt;);<br>          lastPendingUpdate.next = <span class="hljs-literal">null</span>;<br>          update = firstPendingUpdate;<br>          queue.lastBaseUpdate = lastPendingUpdate;<br>          queue.shared.pending = <span class="hljs-literal">null</span>;<br>        &#125;<br>      &#125;<br>    &#125; <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>);<br><br>    <span class="hljs-keyword">if</span> (newLastBaseUpdate === <span class="hljs-literal">null</span>) &#123;<br>      newBaseState = newState;<br>    &#125;<br><br>    queue.baseState = ((newBaseState: any): State);<br>    queue.firstBaseUpdate = newFirstBaseUpdate;<br>    queue.lastBaseUpdate = newLastBaseUpdate;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>flushSyncCallbacks 函数会使得 React 开启一次新的 render 阶段</p></blockquote><h2 id="几个关于-setState-的问题的总结"><a href="#几个关于-setState-的问题的总结" class="headerlink" title="几个关于 setState 的问题的总结"></a>几个关于 setState 的问题的总结</h2><ol><li>setState 是同步还是异步<br>内部实现更新机制是异步，单纯的 setState 是同步方法，所以无法获取到最新的 state</li><li>setState(callback), callback 中为何可以取到最新的 state 值<br>笔记中忘记补了，这里大概描述下，setState 中在 update（即 fiber.updateQueue.shared.pending）上，在触发新的 render 阶段中回调才被执行，此时 state 已被更新;</li><li>为何 setTimeout 中也可以取得最新的 state<br>原理在于 event loop，当 setTimeout 回调执行时 React 已经更新完毕</li></ol><blockquote><p>ps: 仔细看了下源码，貌似并不一定。flushSyncCallbacks 中当发生异常时，未执行的更新队列会通过 ReactScheduler 重新调度（调度的部分后面做详细笔记），此时可能会有问题。<br>pps: 当前笔记仅针对 ReactDom.render，createRoot 采用的是 concurrent 模式<br>setTimeout 使用需谨慎</p></blockquote><h2 id="补充笔记"><a href="#补充笔记" class="headerlink" title="补充笔记"></a>补充笔记</h2><p>之前看的不够详细,enqueueSetState -&gt; scheduleUpdateOnFiber, scheduleUpdateOnFiber 中有一步判断会决定 setStat 是否立即执行更新<br>所以在setTimeout中连续执行setState时不会合并执行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">scheduleUpdateOnFiber</span>(<span class="hljs-params"></span></span><br><span class="hljs-params"><span class="hljs-function">  fiber: Fiber,</span></span><br><span class="hljs-params"><span class="hljs-function">  lane: Lane,</span></span><br><span class="hljs-params"><span class="hljs-function">  eventTime: number</span></span><br><span class="hljs-params"><span class="hljs-function"></span>): <span class="hljs-title">FiberRoot</span> | <span class="hljs-title">null</span> </span>&#123;<br>  <span class="hljs-comment">// ...</span><br>    <span class="hljs-keyword">if</span> (<br>      lane === SyncLane &amp;&amp;<br>      executionContext === NoContext &amp;&amp;<br>      (fiber.mode &amp; ConcurrentMode) === NoMode &amp;&amp;<br>      <span class="hljs-comment">// Treat `act` as if it&#x27;s inside `batchedUpdates`, even in legacy mode.</span><br>      !(__DEV__ &amp;&amp; ReactCurrentActQueue.isBatchingLegacy)<br>    ) &#123;<br>      <span class="hljs-comment">// Flush the synchronous work now, unless we&#x27;re already working or inside</span><br>      <span class="hljs-comment">// a batch. This is intentionally inside scheduleUpdateOnFiber instead of</span><br>      <span class="hljs-comment">// scheduleCallbackForFiber to preserve the ability to schedule a callback</span><br>      <span class="hljs-comment">// without immediately flushing it. We only do this for user-initiated</span><br>      <span class="hljs-comment">// updates, to preserve historical behavior of legacy mode.</span><br>      resetRenderTimer();<br>      flushSyncCallbacksOnlyInLegacyMode();<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> root;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>TODO: 待学习部分，ReactAct咋执行的，代码看麻了，看编译原理，学习基础去了</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>React学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>阿里云视频点播sdk扩展</title>
    <link href="/2021/12/22/1/"/>
    <url>/2021/12/22/1/</url>
    
    <content type="html"><![CDATA[<p>SDK：Javascript SDK   version-1.5.2<br><a href="https://help.aliyun.com/document_detail/52204.html">阿里云视频点播Javascript SDK文档</a></p><p>问题：该版本不支持指定单个文件暂停上传 or 指定目标文件开始上传。sdk提供的几个操作单文件的api支持不到这么细节的操作，deleteFile/cancelFile/resumeFile</p><p>源码解析：</p><blockquote><p>提取sdk代码中的一些关键枚举值</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> VODSTATE = &#123;<br>  <span class="hljs-attr">INIT</span>: <span class="hljs-string">&quot;Init&quot;</span>,<br>  <span class="hljs-attr">START</span>: <span class="hljs-string">&quot;Start&quot;</span>,<br>  <span class="hljs-attr">STOP</span>: <span class="hljs-string">&quot;Stop&quot;</span>,<br>  <span class="hljs-attr">FAILURE</span>: <span class="hljs-string">&quot;Failure&quot;</span>,<br>  <span class="hljs-attr">EXPIRE</span>: <span class="hljs-string">&quot;Expire&quot;</span>,<br>  <span class="hljs-attr">END</span>: <span class="hljs-string">&quot;End&quot;</span>,<br>&#125;;<br><span class="hljs-keyword">const</span> UPLOADSTATE = &#123;<br>  <span class="hljs-attr">INIT</span>: <span class="hljs-string">&quot;Ready&quot;</span>,<br>  <span class="hljs-attr">UPLOADING</span>: <span class="hljs-string">&quot;Uploading&quot;</span>,<br>  <span class="hljs-attr">SUCCESS</span>: <span class="hljs-string">&quot;Success&quot;</span>,<br>  <span class="hljs-attr">FAIlURE</span>: <span class="hljs-string">&quot;Failure&quot;</span>,<br>  <span class="hljs-attr">CANCELED</span>: <span class="hljs-string">&quot;Canceled&quot;</span>,<br>  <span class="hljs-attr">STOPED</span>: <span class="hljs-string">&quot;Stoped&quot;</span>,<br>&#125;;<br><br></code></pre></td></tr></table></figure><blockquote><p>uploader.cancelFile(index)  取消单个文件上传</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>  <span class="hljs-attr">key</span>: <span class="hljs-string">&quot;cancelFile&quot;</span>,<br>  <span class="hljs-attr">value</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.options;<br>    <span class="hljs-keyword">if</span> (e &lt; <span class="hljs-number">0</span> || e &gt;= <span class="hljs-built_in">this</span>._uploadList.length) <span class="hljs-keyword">return</span> !<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">var</span> t = <span class="hljs-built_in">this</span>._uploadList[e];<br>    <span class="hljs-comment">// 判断索引是否和当前操作的上传文件一致 &amp; 索引对应文件的上传状态是否是上传中</span><br>    <span class="hljs-keyword">if</span> (<br>      e == <span class="hljs-built_in">this</span>._curIndex &amp;&amp;<br>      t.state == a.UPLOADSTATE.UPLOADING<br>    ) &#123;<br>      t.state = a.UPLOADSTATE.CANCELED;<br>      <span class="hljs-comment">// 获取已成功上传的分片数据</span><br>      <span class="hljs-keyword">var</span> n = <span class="hljs-built_in">this</span>._getCheckoutpoint(t);<br>      n &amp;&amp; n.checkpoint &amp;&amp; (n = n.checkpoint),<br>      <span class="hljs-comment">// 分片数据存在则停止停止上传分片</span><br>        n &amp;&amp; <span class="hljs-built_in">this</span>._ossUpload.abort(t),<br>      <span class="hljs-comment">// 清楚分片数据缓存</span><br>        <span class="hljs-built_in">this</span>._removeCheckoutpoint(t),<br>      <span class="hljs-comment">// 继续开始下一个上传任务</span><br>        <span class="hljs-built_in">this</span>.nextUpload();<br>    &#125; <span class="hljs-keyword">else</span><br>      <span class="hljs-comment">// 上传状态不等于SUCCESS则直接修改为CANCELED</span><br>      t.state != a.UPLOADSTATE.SUCCESS &amp;&amp;<br>        (t.state = a.UPLOADSTATE.CANCELED);<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>._reportLog(<span class="hljs-string">&quot;20008&quot;</span>, t), !<span class="hljs-number">0</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>abort函数中调用了abortMultipartUpload方法<br><a href="https://help.aliyun.com/document_detail/31996.html">AbortMultipartUpload API文档</a>，调用这个相当于删除了已上传的分片数据并取消分片上传事件<br>说明这个方法不支持暂停上传，在这里我遇到个问题，恢复该文件上传后，异常提示报错：The specified upload does not exist. The upload ID may be invalid, or the upload may have been aborted or completed.<br>这个报错很好理解，结合代码调用，是因为该upload事件been aborted了</p><blockquote><p>结论：cancelFile 是中断上传任务且无法恢复，不能用做暂停处理</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>  <span class="hljs-attr">key</span>: <span class="hljs-string">&quot;abort&quot;</span>,<br>  <span class="hljs-attr">value</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (e.checkpoint) &#123;<br>      <span class="hljs-keyword">var</span> t = e.checkpoint.uploadId;<br>      <span class="hljs-built_in">this</span>.oss.abortMultipartUpload(e.object, t);<br>    &#125;<br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>uploader.deleteFile(index); 删除上传文件<br>调用了cancelFile后从上传文件列表中删除该文件</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>  <span class="hljs-attr">key</span>: <span class="hljs-string">&quot;deleteFile&quot;</span>,<br>  <span class="hljs-attr">value</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> (<br>      !!<span class="hljs-built_in">this</span>.cancelFile(e) &amp;&amp; (<span class="hljs-built_in">this</span>._uploadList.splice(e, <span class="hljs-number">1</span>), !<span class="hljs-number">0</span>)<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>uploader.resumeFile(index);  恢复单个文件上传        </p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>  <span class="hljs-attr">key</span>: <span class="hljs-string">&quot;resumeFile&quot;</span>,<br>  <span class="hljs-attr">value</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.options;<br>    <span class="hljs-keyword">if</span> (e &lt; <span class="hljs-number">0</span> || e &gt;= <span class="hljs-built_in">this</span>._uploadList.length) <span class="hljs-keyword">return</span> !<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">var</span> t = <span class="hljs-built_in">this</span>._uploadList[e];<br>    <span class="hljs-keyword">return</span> (<br>      t.state == a.UPLOADSTATE.CANCELED &amp;&amp;<br>      ((t.state = a.UPLOADSTATE.INIT), !<span class="hljs-number">0</span>)<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>从代码中看只是简单的判断了下状态是否为CANCELED &amp; 修改状态为INIT，没有其他处理，如何恢复上传呢<br>官方文档给的实例，在onUploadstarted回调事件中通过setUploadAuthAndAddress方法开始上传，其中调用了_uploadCore函数,<br>_uploadCore中创建了阿里云对象存储oss实例，并执行this._ossUpload.upload(e, u) 真正开始上传。其中的_complete回调中执行了_complete方法，表示上传完成后执行complete回调</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* _uploadCore */</span><br>&#123;<br>  <span class="hljs-attr">key</span>: <span class="hljs-string">&quot;_uploadCore&quot;</span>,<br>  <span class="hljs-attr">value</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;<br>    <span class="hljs-built_in">arguments</span>.length &gt; <span class="hljs-number">1</span> &amp;&amp;<br>      <span class="hljs-keyword">void</span> <span class="hljs-number">0</span> !== <span class="hljs-built_in">arguments</span>[<span class="hljs-number">1</span>] &amp;&amp;<br>      <span class="hljs-built_in">arguments</span>[<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">if</span> (<br>      !<span class="hljs-built_in">this</span>._ossCreditor.accessKeyId ||<br>      !<span class="hljs-built_in">this</span>._ossCreditor.accessKeySecret ||<br>      !<span class="hljs-built_in">this</span>._ossCreditor.securityToken<br>    )<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<br>        <span class="hljs-string">&quot;AccessKeyId、AccessKeySecret、securityToken should not be null&quot;</span><br>      );<br>    <span class="hljs-keyword">if</span> (((e.state = a.UPLOADSTATE.UPLOADING), !<span class="hljs-built_in">this</span>._ossUpload)) &#123;<br>      e.endpoint =<br>        e.endpoint || <span class="hljs-string">&quot;http://oss-cn-hangzhou.aliyuncs.com&quot;</span>;<br>      <span class="hljs-keyword">var</span> t = <span class="hljs-built_in">this</span>;<br>      <span class="hljs-built_in">this</span>._ossUpload = <span class="hljs-keyword">new</span> c.default(<br>        &#123;<br>          <span class="hljs-attr">bucket</span>: e.bucket,<br>          <span class="hljs-attr">endpoint</span>: e.endpoint,<br>          <span class="hljs-attr">AccessKeyId</span>: <span class="hljs-built_in">this</span>._ossCreditor.accessKeyId,<br>          <span class="hljs-attr">AccessKeySecret</span>: <span class="hljs-built_in">this</span>._ossCreditor.accessKeySecret,<br>          <span class="hljs-attr">SecurityToken</span>: <span class="hljs-built_in">this</span>._ossCreditor.securityToken,<br>          <span class="hljs-attr">timeout</span>: <span class="hljs-built_in">this</span>.options.timeout,<br>          <span class="hljs-attr">cname</span>: <span class="hljs-built_in">this</span>.options.cname,<br>        &#125;,<br>        &#123;<br>          <span class="hljs-attr">onerror</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e, n</span>) </span>&#123;<br>            t._error.call(t, e, n);<br>          &#125;,<br>          <span class="hljs-attr">oncomplete</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e, n</span>) </span>&#123;<br>            t._complete.call(t, e, n);<br>          &#125;,<br>          <span class="hljs-attr">onprogress</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e, n, r</span>) </span>&#123;<br>            t._progress.call(t, e, n, r);<br>          &#125;,<br>        &#125;<br>      );<br>    &#125;<br>    <span class="hljs-keyword">var</span> n = y.default.getFileType(e.file.name),<br>      r = <span class="hljs-built_in">this</span>._getCheckoutpoint(e),<br>      o = <span class="hljs-string">&quot;&quot;</span>,<br>      i = <span class="hljs-string">&quot;&quot;</span>;<br>    r &amp;&amp;<br>      r.checkpoint &amp;&amp;<br>      ((i = r.state), (o = r.videoId), (r = r.checkpoint)),<br>      r &amp;&amp;<br>        o == e.videoId &amp;&amp;<br>        i != a.UPLOADSTATE.UPLOADING &amp;&amp;<br>        ((r.file = e.file), (e.checkpoint = r), r.uploadId);<br>    <span class="hljs-keyword">var</span> s = <span class="hljs-built_in">this</span>._adjustPartSize(e);<br>    <span class="hljs-built_in">this</span>._reportLog(<span class="hljs-string">&quot;20002&quot;</span>, e, &#123;<br>      <span class="hljs-attr">ft</span>: n,<br>      <span class="hljs-attr">fs</span>: e.file.size,<br>      <span class="hljs-attr">bu</span>: e.bucket,<br>      <span class="hljs-attr">ok</span>: e.object,<br>      <span class="hljs-attr">vid</span>: e.videoId || <span class="hljs-string">&quot;&quot;</span>,<br>      <span class="hljs-attr">fn</span>: e.file.name,<br>      <span class="hljs-attr">fw</span>: <span class="hljs-literal">null</span>,<br>      <span class="hljs-attr">fh</span>: <span class="hljs-literal">null</span>,<br>      <span class="hljs-attr">ps</span>: s,<br>    &#125;);<br>    <span class="hljs-keyword">var</span> u = &#123;<br>      <span class="hljs-attr">headers</span>: &#123;<br>        <span class="hljs-string">&quot;x-oss-notification&quot;</span>: e.userData ? e.userData : <span class="hljs-string">&quot;&quot;</span>,<br>      &#125;,<br>      <span class="hljs-attr">partSize</span>: s,<br>      <span class="hljs-attr">parallel</span>: <span class="hljs-built_in">this</span>.options.parallel,<br>    &#125;;<br>    <span class="hljs-built_in">this</span>._ossUpload.upload(e, u);<br>  &#125;,<br>&#125;<br><span class="hljs-comment">/* _complete */</span><br>&#123;<br>  <span class="hljs-attr">key</span>: <span class="hljs-string">&quot;_complete&quot;</span>,<br>  <span class="hljs-attr">value</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e, t</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (<br>      ((e.state = a.UPLOADSTATE.SUCCESS),<br>      <span class="hljs-built_in">this</span>.options.onUploadSucceed)<br>    )<br>      <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-built_in">this</span>.options.onUploadSucceed(e);<br>      &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>        <span class="hljs-built_in">console</span>.log(e);<br>      &#125;<br>    <span class="hljs-keyword">var</span> n = <span class="hljs-number">0</span>;<br>    t &amp;&amp;<br>      t.res &amp;&amp;<br>      t.res.headers &amp;&amp;<br>      (n = t.res.headers[<span class="hljs-string">&quot;x-oss-request-id&quot;</span>]),<br>      <span class="hljs-built_in">this</span>._removeCheckoutpoint(e);<br>    <span class="hljs-keyword">var</span> r = <span class="hljs-built_in">this</span>;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      r.nextUpload();<br>    &#125;, <span class="hljs-number">100</span>),<br>      (<span class="hljs-built_in">this</span>._retryCount = <span class="hljs-number">0</span>),<br>      <span class="hljs-built_in">this</span>._reportLog(<span class="hljs-string">&quot;20003&quot;</span>, e, &#123; <span class="hljs-attr">requestId</span>: n &#125;);<br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><p>注意到_complete中干了什么</p><ol><li>抛出onUploadSucceed回调到用户层，通知该文件上传成功</li><li>移除本地保存分片数据</li><li>100ms后执行nextUpload<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* nextUpload */</span><br>&#123;<br>  <span class="hljs-attr">key</span>: <span class="hljs-string">&quot;nextUpload&quot;</span>,<br>  <span class="hljs-attr">value</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> e = <span class="hljs-built_in">this</span>.options;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>._state == a.VODSTATE.START)<br>      <span class="hljs-keyword">if</span> (<br>        ((<span class="hljs-built_in">this</span>._curIndex = <span class="hljs-built_in">this</span>._findUploadIndex()),<br>        -<span class="hljs-number">1</span> != <span class="hljs-built_in">this</span>._curIndex)<br>      ) &#123;<br>        <span class="hljs-keyword">var</span> t = <span class="hljs-built_in">this</span>._uploadList[<span class="hljs-built_in">this</span>._curIndex];<br>        (<span class="hljs-built_in">this</span>._ossUpload = <span class="hljs-literal">null</span>), <span class="hljs-built_in">this</span>._upload(t);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">this</span>._state = a.VODSTATE.END;<br>        <span class="hljs-keyword">try</span> &#123;<br>          e.onUploadEnd &amp;&amp; e.onUploadEnd(t);<br>        &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>          <span class="hljs-built_in">console</span>.log(e);<br>        &#125;<br>      &#125;<br>  &#125;,<br>&#125;<br><span class="hljs-comment">/* _findUploadIndex */</span><br>&#123;<br>  <span class="hljs-attr">key</span>: <span class="hljs-string">&quot;_findUploadIndex&quot;</span>,<br>  <span class="hljs-attr">value</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> e = -<span class="hljs-number">1</span>, t = <span class="hljs-number">0</span>; t &lt; <span class="hljs-built_in">this</span>._uploadList.length; t++)<br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>._uploadList[t].state == a.UPLOADSTATE.INIT) &#123;<br>        e = t;<br>        <span class="hljs-keyword">break</span>;<br>      &#125;<br>    <span class="hljs-keyword">return</span> e;<br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure>nextUpload中执行逻辑</li><li>判断uploader上传器状态是否为VODSTATE.START</li><li>查找上传文件（_findUploadIndex逻辑，查找第一个上传状态为INIT的文件）</li><li>上一步中查找到文件，则开始上传该文件</li><li>否则说明所有文件上传结束，标记uploader状态为VODSTATE.END &amp; 抛出onUploadEnd回调</li></ol><p>到这里就好理解了，为何resumeFile只是更改状态没有做其他操作，因为当有某个文件结束上传任务时会自动运行下一个INIT状态的上传任务</p><p>看到这里大概能理解为什么官方文档中推荐不要使用批量上传了，如果单个文件调用cancelFile后再调用resumeFile是不可能恢复 上传的，因为不会有其他文件上传结束触发nextUpload，而且cancelFile是取消上传job，resumeFile再恢复必报错。这里就比较疑惑了，因为resumeFile中判断CANCELED状态说明必然是跟在cancelFile后使用的</p><blockquote><p>为了实现业务逻辑，扩展了几个方法实现</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> (AliyunUpload.Vod) &#123;<br>  <span class="hljs-keyword">const</span> VODSTATE = &#123;<br>    <span class="hljs-attr">INIT</span>: <span class="hljs-string">&#x27;Init&#x27;</span>,<br>    <span class="hljs-attr">START</span>: <span class="hljs-string">&#x27;Start&#x27;</span>,<br>    <span class="hljs-attr">STOP</span>: <span class="hljs-string">&#x27;Stop&#x27;</span>,<br>    <span class="hljs-attr">FAILURE</span>: <span class="hljs-string">&#x27;Failure&#x27;</span>,<br>    <span class="hljs-attr">EXPIRE</span>: <span class="hljs-string">&#x27;Expire&#x27;</span>,<br>    <span class="hljs-attr">END</span>: <span class="hljs-string">&#x27;End&#x27;</span><br>  &#125;<br>  <span class="hljs-keyword">const</span> UPLOADSTATE = &#123;<br>    <span class="hljs-attr">INIT</span>: <span class="hljs-string">&#x27;Ready&#x27;</span>,<br>    <span class="hljs-attr">UPLOADING</span>: <span class="hljs-string">&#x27;Uploading&#x27;</span>,<br>    <span class="hljs-attr">SUCCESS</span>: <span class="hljs-string">&#x27;Success&#x27;</span>,<br>    <span class="hljs-attr">FAIlURE</span>: <span class="hljs-string">&#x27;Failure&#x27;</span>,<br>    <span class="hljs-attr">CANCELED</span>: <span class="hljs-string">&#x27;Canceled&#x27;</span>,<br>    <span class="hljs-attr">STOPED</span>: <span class="hljs-string">&#x27;Stoped&#x27;</span><br>  &#125;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 重启停止的文件上传</span><br><span class="hljs-comment">   */</span><br>  AliyunUpload.Vod.prototype.restartFile = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">index</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>._retryCount = <span class="hljs-number">0</span><br>    <span class="hljs-built_in">this</span>.options<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>._state == VODSTATE.START || <span class="hljs-built_in">this</span>._state == VODSTATE.EXPIRE) &#123;<br>      <span class="hljs-built_in">console</span>.warn(<span class="hljs-string">&#x27;already started or expired&#x27;</span>)<br>      <span class="hljs-keyword">return</span><br>    &#125;<br>    <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">0</span> || index &gt;= <span class="hljs-built_in">this</span>._uploadList.length) &#123;<br>      <span class="hljs-keyword">return</span><br>    &#125;<br>    <span class="hljs-keyword">var</span> t = <span class="hljs-built_in">this</span>._uploadList[index]<br>    <span class="hljs-built_in">this</span>._ossUpload = <span class="hljs-literal">null</span><br>    <span class="hljs-built_in">this</span>._initState()<br>    <span class="hljs-built_in">this</span>._upload(t)<br>    <span class="hljs-built_in">this</span>._state = VODSTATE.START<br>  &#125;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 从索引位置开始查找待上传的文件索引</span><br><span class="hljs-comment">   * 如果不存在则从首个位置到索引位置中查找</span><br><span class="hljs-comment">   */</span><br>  AliyunUpload.Vod.prototype.findIndexOfWaiting = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">index = <span class="hljs-number">0</span></span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">0</span> || index + <span class="hljs-number">1</span> &gt;= <span class="hljs-built_in">this</span>._uploadList.length) &#123;<br>      <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br>    &#125;<br>    <span class="hljs-keyword">let</span> indexList = []<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">this</span>._uploadList.length; i++) &#123;<br>      <span class="hljs-keyword">const</span> item = <span class="hljs-built_in">this</span>._uploadList[i]<br>      <span class="hljs-keyword">if</span> (item.state === UPLOADSTATE.INIT) &#123;<br>        <span class="hljs-keyword">if</span> (i &lt; index) indexList.push(i)<br>        <span class="hljs-keyword">if</span> (i &gt; index) &#123;<br>          <span class="hljs-keyword">return</span> i<br>        &#125;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> indexList.length &gt; <span class="hljs-number">0</span> ? indexList[<span class="hljs-number">0</span>] : -<span class="hljs-number">1</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>简单的使用场景流程DEMO，这里还有个问题在于，stopUpload会更改文件状态为STOP，自动开始下一个任务时不会执行STOP状态的任务，需要手动开始，不过问题不大，所以不做更多改造了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/** 暂停单个文件上传 */</span><br><span class="hljs-function"><span class="hljs-title">pause</span>(<span class="hljs-params">index</span>)</span> &#123;<br>  <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.uploader == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <br>  <span class="hljs-built_in">this</span>.uploader.stopUpload()<br>  <span class="hljs-comment">// 获取上传文件列表</span><br>  <span class="hljs-keyword">const</span> uploadFiles = <span class="hljs-built_in">this</span>.uploader.listFiles()<br>  <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">0</span> || index &gt; uploadFiles.length) <span class="hljs-keyword">return</span><br>  <span class="hljs-comment">// 获取下一个可执行上传的上传文件</span><br>  <span class="hljs-keyword">const</span> waitingIndex = <span class="hljs-built_in">this</span>.uploader.findIndexOfWaiting(index)<br>  <span class="hljs-comment">// 自动开始下一个上传任务</span><br>  <span class="hljs-keyword">if</span> (waitingIndex &gt;= <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-built_in">this</span>.uploader.restartFile(waitingIndex)<br>  &#125;<br>&#125;,<br><span class="hljs-comment">/** 删除单个上传文件 */</span><br><span class="hljs-function"><span class="hljs-title">del</span>(<span class="hljs-params">index</span>)</span> &#123;<br>  <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.uploader == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <br>  <span class="hljs-built_in">this</span>.uploader.deleteFile(index)<br>&#125;,<br><span class="hljs-comment">/** 恢复单个文件上传 */</span><br><span class="hljs-function"><span class="hljs-title">resume</span>(<span class="hljs-params">index</span>)</span> &#123;<br>  <span class="hljs-built_in">this</span>.uploader.restartFile(index)<br>&#125;,<br></code></pre></td></tr></table></figure><p>stopUpload配合其他几个扩展方法为何能实现单个文件上传的暂停/恢复就不具体做源码解析了，说明下大概流程</p><ol><li>stopUpload =&gt; 停止当前正常执行的任务，执行_changeState方法，执行ossUpload.cancel取消上传（和abort不同，可以理解为暂时停止了当前的oss上传）</li><li>_changeState中获取了当前已成功上传的分片数据，并保存到localStorage中</li><li>这些保存的分片数据会在开始上传的时候回传到oss，具体逻辑可以参考<a href="https://help.aliyun.com/document_detail/52204.html?spm=a2c4g.11186623.0.0.131d6515sHP4SQ#title-235-ywd-zkh">阿里云视频点播-断点续传</a>，<a href="https://help.aliyun.com/document_detail/31850.html?spm=5176.21213303.J_6028563670.19.3bde3edavQ9Y21&scm=20140722.S_help@@%E6%96%87%E6%A1%A3@@31850.S_hot.ID_31850-RL_%E6%96%AD%E7%82%B9-OR_s+helpmain-V_1-P0_2">oss-分片上传和断点续传</a></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>How to disable predictive scrolling</title>
    <link href="/2021/12/22/2/"/>
    <url>/2021/12/22/2/</url>
    
    <content type="html"><![CDATA[<p>最近做一个全屏滚动的效果，类似 fullPage，之所以没用一个因为 fullPage 的开源协议是 GPL，另一个是需求上没有 fullPage 那么多兼容支持，就想着自己写一个。</p><p>想法挺好，大致的实现思路也简单：</p><ol><li>body 或者外层套一个 div 设置高宽 100vw,100vh，并且禁止溢出</li><li>每一屏一个容器 container，并且使用一个 wrapper 容器包裹起来</li><li>初始化时设置 container 的高度为当前窗口高度，宽度为 100%</li><li>监听 wheel 事件，每次发生滚动时，记录下当前滚动到第几屏，计算 y 值，设置 wrapper 的 transform 让页面上下滚动起来</li></ol><blockquote><p>Demo 不考虑兼容性，实战的同学看下实现思路即可</p></blockquote><p>大致的效果：<a href="https://moring-abyss.github.io/example/1.html" target="_blank">页面 Demo</a>，代码可以直接查看网页源代码</p><p>这里遇见个问题，无论是 wheel 还是 scroll 事件，滑轮轻轻的滚动一次都会造成 n 次的回调被执行,我们期望的结果是在滚动完成之前只执行一次，严格来说回调执行几次都不 care，最关键的发生滚动的步骤只能执行一次</p><p>最开始的思路挺多，因为可以预设 transition 动画的执行时间，有了这个时间有很多中解决方法，例如节流函数，或者 setTimeout or 监听 transitionend 事件</p><p>最后选择了 fullPage 一样的方式，设置滚动状态，通过 setTimeout 重置的方式</p><p>我以为我解决了这个问题，直到我用触控板触发滚动滑动….</p><blockquote><p>正题来了 How to disable predictive scrolling</p></blockquote><p>预测滚动，即当手指离开触控板后滚动仍会持续一段时间，查询国内外文章，大部分都指向 stackoverflow 的这个<a href="https://stackoverflow.com/questions/34831120/disable-predictive-scrolling-mousewheel-onscroll-event-fires-too-often-touc">问题</a></p><p><b>简单概括一下就是：目前没有办法解决</b></p><blockquote><p>触控板不会触发 touch 事件，实验性质的 PointEvent 目前支持的也不好，单指和双指点按滑动的触发事件也解决不了这个问题</p></blockquote><p>然后我发现 fullPage 没有这个 bug，于是我决定扌…额，学习一下大佬怎么解决的…</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> (canScroll) &#123;<br>  <span class="hljs-keyword">if</span> (isScrollingVertically &amp;&amp; isAccelerating) &#123;<br>    <span class="hljs-comment">/* doing scroll */</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>以上是关键代码,canScroll 的性质和我的思路一致，解决预测性滚动的关键点在于内部的 if 判断上。</p><p>isScrollingVertically:用来做是否垂直滚动的判断的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> horizontalDetection =<br>  <span class="hljs-keyword">typeof</span> e.wheelDeltaX !== <span class="hljs-string">&quot;undefined&quot;</span> || <span class="hljs-keyword">typeof</span> e.deltaX !== <span class="hljs-string">&quot;undefined&quot;</span>;<br><br><span class="hljs-keyword">var</span> isScrollingVertically =<br>  <span class="hljs-built_in">Math</span>.abs(e.wheelDeltaX) &lt; <span class="hljs-built_in">Math</span>.abs(e.wheelDelta) ||<br>  <span class="hljs-built_in">Math</span>.abs(e.deltaX) &lt; <span class="hljs-built_in">Math</span>.abs(e.deltaY) ||<br>  !horizontalDetection;<br></code></pre></td></tr></table></figure><p>isAccelerating 的计算逻辑：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> scrollings = []<br><span class="hljs-keyword">let</span> prevTime = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getTime()<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">wheel</span>(<span class="hljs-params">e</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (scrollings.length &gt; <span class="hljs-number">149</span>) &#123;<br>    scrollings.shift();<br>  &#125;<br><br>  <span class="hljs-keyword">var</span> value = e.wheelDelta || -e.deltaY || -e.detail;<br>  <span class="hljs-keyword">var</span> curTime = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getTime();<br>  scrollings.push(<span class="hljs-built_in">Math</span>.abs(value));<br>  <span class="hljs-comment">// 上面这段逻辑很好理解，记录本次（包括本次）之前的150次的滑动距离</span><br><br>  <span class="hljs-keyword">var</span> timeDiff = curTime - prevTime;<br>  prevTime = curTime;<br>  <span class="hljs-keyword">if</span> (timeDiff &gt; <span class="hljs-number">200</span>) &#123;<br>    scrollings = [];<br>  &#125; <br>  <span class="hljs-comment">// 这段逻辑是用来处理当本次事件执行与上次执行超过200ms时就可以认为这是第二次鼠标/触控板滑动触发</span><br>  <span class="hljs-comment">// Q：200这个时间怎么定的，不太理解</span><br><br>  <span class="hljs-comment">// getAverage函数是从scrollings中取出指定索引往后的所有元素的平均数</span><br>  <span class="hljs-comment">// 那整个逻辑就好理解了，fullPage的作者通过记录前150次的滚动距离，并通过计算最后70次的平均滚动距离和最后10次的平均滚动距离，如果最后10次的不小于最后70次说明非预测性滚动</span><br>  <span class="hljs-keyword">var</span> averageEnd = getAverage(scrollings, <span class="hljs-number">10</span>);<br>  <span class="hljs-keyword">var</span> averageMiddle = getAverage(scrollings, <span class="hljs-number">70</span>);<br>  <span class="hljs-keyword">var</span> isAccelerating = averageEnd &gt;= averageMiddle;<br>  <span class="hljs-comment">// 特别说明下，不明白的可以试验下，预测性滚动的最后几次滚动距离较小，这种判断方式目前看来没啥问题，贼强</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getAverage</span>(<span class="hljs-params">elements, number</span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> sum = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">var</span> lastElements = elements.slice(<span class="hljs-built_in">Math</span>.max(elements.length - number, <span class="hljs-number">1</span>));<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; lastElements.length; i++) &#123;<br>    sum = sum + lastElements[i];<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.ceil(sum / number);<br>&#125;<br></code></pre></td></tr></table></figure><br />加了这些逻辑的<a href="https://moring-abyss.github.io/example/2.html">Demo</a>效果  <br /><br /><blockquote><p>ps: resize事件中因需要重新设置子元素高度和transform，如果事先移除transition动画效果会造成页面大幅度的抖动</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
